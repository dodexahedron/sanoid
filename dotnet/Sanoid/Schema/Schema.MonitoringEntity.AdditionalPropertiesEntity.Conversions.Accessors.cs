//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using Corvus.Json;

namespace Sanoid.Schema;
public readonly partial struct Schema
{
    public readonly partial struct MonitoringEntity
    {
        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly partial struct AdditionalPropertiesEntity
        {
            /// <summary>
            /// Gets the value as a <see cref = "Sanoid.Schema.SanoidMonitoringSchemaJson"/>.
            /// </summary>
            public Sanoid.Schema.SanoidMonitoringSchemaJson AsSanoidMonitoringSchemaJson
            {
                get
                {
                    return (Sanoid.Schema.SanoidMonitoringSchemaJson)this;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is a valid <see cref = "Sanoid.Schema.SanoidMonitoringSchemaJson"/>.
            /// </summary>
            public bool IsSanoidMonitoringSchemaJson
            {
                get
                {
                    return ((Sanoid.Schema.SanoidMonitoringSchemaJson)this).IsValid();
                }
            }

            /// <summary>
            /// Gets the value as a <see cref = "Sanoid.Schema.SanoidMonitoringSchemaJson"/>.
            /// </summary>
            /// <param name = "result">The result of the conversion.</param>
            /// <returns><c>True</c> if the conversion was valid.</returns>
            public bool TryGetAsSanoidMonitoringSchemaJson(out Sanoid.Schema.SanoidMonitoringSchemaJson result)
            {
                result = (Sanoid.Schema.SanoidMonitoringSchemaJson)this;
                return result.IsValid();
            }
        }
    }
}