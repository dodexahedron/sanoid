//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Sanoid.Schema;
/// <summary>
/// A type generated from a JsonSchema specification.
/// </summary>
public readonly partial struct SanoidMonitoringSchemaJson
{
    /// <summary>
    /// JSON property name for <see cref = "MonitorType"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> MonitorTypeUtf8JsonPropertyName = new byte[]{77, 111, 110, 105, 116, 111, 114, 84, 121, 112, 101};
    /// <summary>
    /// JSON property name for <see cref = "MonitorType"/>.
    /// </summary>
    public const string MonitorTypeJsonPropertyName = "MonitorType";
    /// <summary>
    /// JSON property name for <see cref = "Comments"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> CommentsUtf8JsonPropertyName = new byte[]{36, 99, 111, 109, 109, 101, 110, 116, 115};
    /// <summary>
    /// JSON property name for <see cref = "Comments"/>.
    /// </summary>
    public const string CommentsJsonPropertyName = "$comments";
    /// <summary>
    /// JSON property name for <see cref = "Health"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> HealthUtf8JsonPropertyName = new byte[]{72, 101, 97, 108, 116, 104};
    /// <summary>
    /// JSON property name for <see cref = "Health"/>.
    /// </summary>
    public const string HealthJsonPropertyName = "Health";
    /// <summary>
    /// JSON property name for <see cref = "Capacity"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> CapacityUtf8JsonPropertyName = new byte[]{67, 97, 112, 97, 99, 105, 116, 121};
    /// <summary>
    /// JSON property name for <see cref = "Capacity"/>.
    /// </summary>
    public const string CapacityJsonPropertyName = "Capacity";
    /// <summary>
    /// JSON property name for <see cref = "Snapshots"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> SnapshotsUtf8JsonPropertyName = new byte[]{83, 110, 97, 112, 115, 104, 111, 116, 115};
    /// <summary>
    /// JSON property name for <see cref = "Snapshots"/>.
    /// </summary>
    public const string SnapshotsJsonPropertyName = "Snapshots";
    /// <summary>
    /// Gets MonitorType.
    /// </summary>
    public Sanoid.Schema.SanoidMonitoringSchemaJson.MonitorTypeEntity MonitorType
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(MonitorTypeUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Sanoid.Schema.SanoidMonitoringSchemaJson.MonitorTypeEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(MonitorTypeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Sanoid.Schema.SanoidMonitoringSchemaJson.MonitorTypeEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Comments.
    /// </summary>
    public Corvus.Json.JsonString Comments
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(CommentsUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(CommentsJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Health.
    /// </summary>
    public Sanoid.Schema.SanoidMonitoringSchemaJson.HealthEntity Health
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(HealthUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Sanoid.Schema.SanoidMonitoringSchemaJson.HealthEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(HealthJsonPropertyName, out JsonAny result))
                {
                    return result.As<Sanoid.Schema.SanoidMonitoringSchemaJson.HealthEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Capacity.
    /// </summary>
    public Sanoid.Schema.SanoidMonitoringSchemaJson.CapacityEntity Capacity
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(CapacityUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Sanoid.Schema.SanoidMonitoringSchemaJson.CapacityEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(CapacityJsonPropertyName, out JsonAny result))
                {
                    return result.As<Sanoid.Schema.SanoidMonitoringSchemaJson.CapacityEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Snapshots.
    /// </summary>
    public Sanoid.Schema.SanoidMonitoringSchemaJson.SnapshotsEntity Snapshots
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(SnapshotsUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Sanoid.Schema.SanoidMonitoringSchemaJson.SnapshotsEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(SnapshotsJsonPropertyName, out JsonAny result))
                {
                    return result.As<Sanoid.Schema.SanoidMonitoringSchemaJson.SnapshotsEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Creates an instance of a <see cref = "SanoidMonitoringSchemaJson"/>.
    /// </summary>
    public static SanoidMonitoringSchemaJson Create(Sanoid.Schema.SanoidMonitoringSchemaJson.MonitorTypeEntity monitorType, Corvus.Json.JsonString? comments = null, Sanoid.Schema.SanoidMonitoringSchemaJson.HealthEntity? health = null, Sanoid.Schema.SanoidMonitoringSchemaJson.CapacityEntity? capacity = null, Sanoid.Schema.SanoidMonitoringSchemaJson.SnapshotsEntity? snapshots = null)
    {
        var builder = ImmutableDictionary.CreateBuilder<JsonPropertyName, JsonAny>();
        builder.Add(MonitorTypeJsonPropertyName, monitorType.AsAny);
        if (comments is Corvus.Json.JsonString comments__)
        {
            builder.Add(CommentsJsonPropertyName, comments__.AsAny);
        }

        if (health is Sanoid.Schema.SanoidMonitoringSchemaJson.HealthEntity health__)
        {
            builder.Add(HealthJsonPropertyName, health__.AsAny);
        }

        if (capacity is Sanoid.Schema.SanoidMonitoringSchemaJson.CapacityEntity capacity__)
        {
            builder.Add(CapacityJsonPropertyName, capacity__.AsAny);
        }

        if (snapshots is Sanoid.Schema.SanoidMonitoringSchemaJson.SnapshotsEntity snapshots__)
        {
            builder.Add(SnapshotsJsonPropertyName, snapshots__.AsAny);
        }

        return builder.ToImmutable();
    }

    /// <summary>
    /// Sets MonitorType.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public SanoidMonitoringSchemaJson WithMonitorType(in Sanoid.Schema.SanoidMonitoringSchemaJson.MonitorTypeEntity value)
    {
        return this.SetProperty(MonitorTypeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets $comments.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public SanoidMonitoringSchemaJson WithComments(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(CommentsJsonPropertyName, value);
    }

    /// <summary>
    /// Sets Health.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public SanoidMonitoringSchemaJson WithHealth(in Sanoid.Schema.SanoidMonitoringSchemaJson.HealthEntity value)
    {
        return this.SetProperty(HealthJsonPropertyName, value);
    }

    /// <summary>
    /// Sets Capacity.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public SanoidMonitoringSchemaJson WithCapacity(in Sanoid.Schema.SanoidMonitoringSchemaJson.CapacityEntity value)
    {
        return this.SetProperty(CapacityJsonPropertyName, value);
    }

    /// <summary>
    /// Sets Snapshots.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public SanoidMonitoringSchemaJson WithSnapshots(in Sanoid.Schema.SanoidMonitoringSchemaJson.SnapshotsEntity value)
    {
        return this.SetProperty(SnapshotsJsonPropertyName, value);
    }

    private static ValidationContext __CorvusValidateMonitorType(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Sanoid.Schema.SanoidMonitoringSchemaJson.MonitorTypeEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateComments(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateHealth(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Sanoid.Schema.SanoidMonitoringSchemaJson.HealthEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateCapacity(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Sanoid.Schema.SanoidMonitoringSchemaJson.CapacityEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateSnapshots(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Sanoid.Schema.SanoidMonitoringSchemaJson.SnapshotsEntity>().Validate(validationContext, level);
    }

    /// <summary>
    /// Tries to get the validator for the given property.
    /// </summary>
    /// <param name = "property">The property for which to get the validator.</param>
    /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
    /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
    /// <returns><c>True</c> if the validator was found.</returns>
    private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
    {
        if (hasJsonElementBacking)
        {
            if (property.NameEquals(MonitorTypeUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateMonitorType;
                return true;
            }
            else if (property.NameEquals(CommentsUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateComments;
                return true;
            }
            else if (property.NameEquals(HealthUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateHealth;
                return true;
            }
            else if (property.NameEquals(CapacityUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateCapacity;
                return true;
            }
            else if (property.NameEquals(SnapshotsUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateSnapshots;
                return true;
            }
        }
        else
        {
            if (property.NameEquals(MonitorTypeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateMonitorType;
                return true;
            }
            else if (property.NameEquals(CommentsJsonPropertyName))
            {
                propertyValidator = __CorvusValidateComments;
                return true;
            }
            else if (property.NameEquals(HealthJsonPropertyName))
            {
                propertyValidator = __CorvusValidateHealth;
                return true;
            }
            else if (property.NameEquals(CapacityJsonPropertyName))
            {
                propertyValidator = __CorvusValidateCapacity;
                return true;
            }
            else if (property.NameEquals(SnapshotsJsonPropertyName))
            {
                propertyValidator = __CorvusValidateSnapshots;
                return true;
            }
        }

        propertyValidator = null;
        return false;
    }
}