//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Sanoid.Schema;
public readonly partial struct Schema
{
    public readonly partial struct FormattingEntity
    {
        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly partial struct SnapshotNamingEntity
        {
            /// <summary>
            /// JSON property name for <see cref = "ComponentSeparator"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> ComponentSeparatorUtf8JsonPropertyName = new byte[]{67, 111, 109, 112, 111, 110, 101, 110, 116, 83, 101, 112, 97, 114, 97, 116, 111, 114};
            /// <summary>
            /// JSON property name for <see cref = "ComponentSeparator"/>.
            /// </summary>
            public const string ComponentSeparatorJsonPropertyName = "ComponentSeparator";
            /// <summary>
            /// JSON property name for <see cref = "Prefix"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> PrefixUtf8JsonPropertyName = new byte[]{80, 114, 101, 102, 105, 120};
            /// <summary>
            /// JSON property name for <see cref = "Prefix"/>.
            /// </summary>
            public const string PrefixJsonPropertyName = "Prefix";
            /// <summary>
            /// JSON property name for <see cref = "TimestampFormatString"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> TimestampFormatStringUtf8JsonPropertyName = new byte[]{84, 105, 109, 101, 115, 116, 97, 109, 112, 70, 111, 114, 109, 97, 116, 83, 116, 114, 105, 110, 103};
            /// <summary>
            /// JSON property name for <see cref = "TimestampFormatString"/>.
            /// </summary>
            public const string TimestampFormatStringJsonPropertyName = "TimestampFormatString";
            /// <summary>
            /// JSON property name for <see cref = "FrequentSuffix"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> FrequentSuffixUtf8JsonPropertyName = new byte[]{70, 114, 101, 113, 117, 101, 110, 116, 83, 117, 102, 102, 105, 120};
            /// <summary>
            /// JSON property name for <see cref = "FrequentSuffix"/>.
            /// </summary>
            public const string FrequentSuffixJsonPropertyName = "FrequentSuffix";
            /// <summary>
            /// JSON property name for <see cref = "HourlySuffix"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> HourlySuffixUtf8JsonPropertyName = new byte[]{72, 111, 117, 114, 108, 121, 83, 117, 102, 102, 105, 120};
            /// <summary>
            /// JSON property name for <see cref = "HourlySuffix"/>.
            /// </summary>
            public const string HourlySuffixJsonPropertyName = "HourlySuffix";
            /// <summary>
            /// JSON property name for <see cref = "DailySuffix"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> DailySuffixUtf8JsonPropertyName = new byte[]{68, 97, 105, 108, 121, 83, 117, 102, 102, 105, 120};
            /// <summary>
            /// JSON property name for <see cref = "DailySuffix"/>.
            /// </summary>
            public const string DailySuffixJsonPropertyName = "DailySuffix";
            /// <summary>
            /// JSON property name for <see cref = "WeeklySuffix"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> WeeklySuffixUtf8JsonPropertyName = new byte[]{87, 101, 101, 107, 108, 121, 83, 117, 102, 102, 105, 120};
            /// <summary>
            /// JSON property name for <see cref = "WeeklySuffix"/>.
            /// </summary>
            public const string WeeklySuffixJsonPropertyName = "WeeklySuffix";
            /// <summary>
            /// JSON property name for <see cref = "MonthlySuffix"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> MonthlySuffixUtf8JsonPropertyName = new byte[]{77, 111, 110, 116, 104, 108, 121, 83, 117, 102, 102, 105, 120};
            /// <summary>
            /// JSON property name for <see cref = "MonthlySuffix"/>.
            /// </summary>
            public const string MonthlySuffixJsonPropertyName = "MonthlySuffix";
            /// <summary>
            /// JSON property name for <see cref = "YearlySuffix"/>.
            /// </summary>
            public static readonly ReadOnlyMemory<byte> YearlySuffixUtf8JsonPropertyName = new byte[]{89, 101, 97, 114, 108, 121, 83, 117, 102, 102, 105, 120};
            /// <summary>
            /// JSON property name for <see cref = "YearlySuffix"/>.
            /// </summary>
            public const string YearlySuffixJsonPropertyName = "YearlySuffix";
            /// <summary>
            /// Gets ComponentSeparator.
            /// </summary>
            public Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.ComponentSeparatorEntity ComponentSeparator
            {
                get
                {
                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                        {
                            return default;
                        }

                        if (this.jsonElementBacking.TryGetProperty(ComponentSeparatorUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.ComponentSeparatorEntity(result);
                        }
                    }

                    if ((this.backing & Backing.Object) != 0)
                    {
                        if (this.objectBacking.TryGetValue(ComponentSeparatorJsonPropertyName, out JsonAny result))
                        {
                            return result.As<Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.ComponentSeparatorEntity>();
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets Prefix.
            /// </summary>
            public Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.PrefixEntity Prefix
            {
                get
                {
                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                        {
                            return default;
                        }

                        if (this.jsonElementBacking.TryGetProperty(PrefixUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.PrefixEntity(result);
                        }
                    }

                    if ((this.backing & Backing.Object) != 0)
                    {
                        if (this.objectBacking.TryGetValue(PrefixJsonPropertyName, out JsonAny result))
                        {
                            return result.As<Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.PrefixEntity>();
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets TimestampFormatString.
            /// </summary>
            public Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.TimestampFormatStringEntity TimestampFormatString
            {
                get
                {
                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                        {
                            return default;
                        }

                        if (this.jsonElementBacking.TryGetProperty(TimestampFormatStringUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.TimestampFormatStringEntity(result);
                        }
                    }

                    if ((this.backing & Backing.Object) != 0)
                    {
                        if (this.objectBacking.TryGetValue(TimestampFormatStringJsonPropertyName, out JsonAny result))
                        {
                            return result.As<Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.TimestampFormatStringEntity>();
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets FrequentSuffix.
            /// </summary>
            public Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.FrequentSuffixEntity FrequentSuffix
            {
                get
                {
                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                        {
                            return default;
                        }

                        if (this.jsonElementBacking.TryGetProperty(FrequentSuffixUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.FrequentSuffixEntity(result);
                        }
                    }

                    if ((this.backing & Backing.Object) != 0)
                    {
                        if (this.objectBacking.TryGetValue(FrequentSuffixJsonPropertyName, out JsonAny result))
                        {
                            return result.As<Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.FrequentSuffixEntity>();
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets HourlySuffix.
            /// </summary>
            public Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.HourlySuffixEntity HourlySuffix
            {
                get
                {
                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                        {
                            return default;
                        }

                        if (this.jsonElementBacking.TryGetProperty(HourlySuffixUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.HourlySuffixEntity(result);
                        }
                    }

                    if ((this.backing & Backing.Object) != 0)
                    {
                        if (this.objectBacking.TryGetValue(HourlySuffixJsonPropertyName, out JsonAny result))
                        {
                            return result.As<Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.HourlySuffixEntity>();
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets DailySuffix.
            /// </summary>
            public Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.DailySuffixEntity DailySuffix
            {
                get
                {
                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                        {
                            return default;
                        }

                        if (this.jsonElementBacking.TryGetProperty(DailySuffixUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.DailySuffixEntity(result);
                        }
                    }

                    if ((this.backing & Backing.Object) != 0)
                    {
                        if (this.objectBacking.TryGetValue(DailySuffixJsonPropertyName, out JsonAny result))
                        {
                            return result.As<Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.DailySuffixEntity>();
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets WeeklySuffix.
            /// </summary>
            public Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.WeeklySuffixEntity WeeklySuffix
            {
                get
                {
                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                        {
                            return default;
                        }

                        if (this.jsonElementBacking.TryGetProperty(WeeklySuffixUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.WeeklySuffixEntity(result);
                        }
                    }

                    if ((this.backing & Backing.Object) != 0)
                    {
                        if (this.objectBacking.TryGetValue(WeeklySuffixJsonPropertyName, out JsonAny result))
                        {
                            return result.As<Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.WeeklySuffixEntity>();
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets MonthlySuffix.
            /// </summary>
            public Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.MonthlySuffixEntity MonthlySuffix
            {
                get
                {
                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                        {
                            return default;
                        }

                        if (this.jsonElementBacking.TryGetProperty(MonthlySuffixUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.MonthlySuffixEntity(result);
                        }
                    }

                    if ((this.backing & Backing.Object) != 0)
                    {
                        if (this.objectBacking.TryGetValue(MonthlySuffixJsonPropertyName, out JsonAny result))
                        {
                            return result.As<Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.MonthlySuffixEntity>();
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets YearlySuffix.
            /// </summary>
            public Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.YearlySuffixEntity YearlySuffix
            {
                get
                {
                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                        {
                            return default;
                        }

                        if (this.jsonElementBacking.TryGetProperty(YearlySuffixUtf8JsonPropertyName.Span, out JsonElement result))
                        {
                            return new Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.YearlySuffixEntity(result);
                        }
                    }

                    if ((this.backing & Backing.Object) != 0)
                    {
                        if (this.objectBacking.TryGetValue(YearlySuffixJsonPropertyName, out JsonAny result))
                        {
                            return result.As<Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.YearlySuffixEntity>();
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Creates an instance of a <see cref = "SnapshotNamingEntity"/>.
            /// </summary>
            public static SnapshotNamingEntity Create(Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.ComponentSeparatorEntity componentSeparator, Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.PrefixEntity prefix, Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.TimestampFormatStringEntity timestampFormatString, Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.FrequentSuffixEntity frequentSuffix, Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.HourlySuffixEntity hourlySuffix, Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.DailySuffixEntity dailySuffix, Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.WeeklySuffixEntity weeklySuffix, Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.MonthlySuffixEntity monthlySuffix, Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.YearlySuffixEntity yearlySuffix)
            {
                var builder = ImmutableDictionary.CreateBuilder<JsonPropertyName, JsonAny>();
                builder.Add(ComponentSeparatorJsonPropertyName, componentSeparator.AsAny);
                builder.Add(PrefixJsonPropertyName, prefix.AsAny);
                builder.Add(TimestampFormatStringJsonPropertyName, timestampFormatString.AsAny);
                builder.Add(FrequentSuffixJsonPropertyName, frequentSuffix.AsAny);
                builder.Add(HourlySuffixJsonPropertyName, hourlySuffix.AsAny);
                builder.Add(DailySuffixJsonPropertyName, dailySuffix.AsAny);
                builder.Add(WeeklySuffixJsonPropertyName, weeklySuffix.AsAny);
                builder.Add(MonthlySuffixJsonPropertyName, monthlySuffix.AsAny);
                builder.Add(YearlySuffixJsonPropertyName, yearlySuffix.AsAny);
                return builder.ToImmutable();
            }

            /// <summary>
            /// Sets ComponentSeparator.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public SnapshotNamingEntity WithComponentSeparator(in Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.ComponentSeparatorEntity value)
            {
                return this.SetProperty(ComponentSeparatorJsonPropertyName, value);
            }

            /// <summary>
            /// Sets Prefix.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public SnapshotNamingEntity WithPrefix(in Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.PrefixEntity value)
            {
                return this.SetProperty(PrefixJsonPropertyName, value);
            }

            /// <summary>
            /// Sets TimestampFormatString.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public SnapshotNamingEntity WithTimestampFormatString(in Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.TimestampFormatStringEntity value)
            {
                return this.SetProperty(TimestampFormatStringJsonPropertyName, value);
            }

            /// <summary>
            /// Sets FrequentSuffix.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public SnapshotNamingEntity WithFrequentSuffix(in Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.FrequentSuffixEntity value)
            {
                return this.SetProperty(FrequentSuffixJsonPropertyName, value);
            }

            /// <summary>
            /// Sets HourlySuffix.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public SnapshotNamingEntity WithHourlySuffix(in Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.HourlySuffixEntity value)
            {
                return this.SetProperty(HourlySuffixJsonPropertyName, value);
            }

            /// <summary>
            /// Sets DailySuffix.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public SnapshotNamingEntity WithDailySuffix(in Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.DailySuffixEntity value)
            {
                return this.SetProperty(DailySuffixJsonPropertyName, value);
            }

            /// <summary>
            /// Sets WeeklySuffix.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public SnapshotNamingEntity WithWeeklySuffix(in Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.WeeklySuffixEntity value)
            {
                return this.SetProperty(WeeklySuffixJsonPropertyName, value);
            }

            /// <summary>
            /// Sets MonthlySuffix.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public SnapshotNamingEntity WithMonthlySuffix(in Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.MonthlySuffixEntity value)
            {
                return this.SetProperty(MonthlySuffixJsonPropertyName, value);
            }

            /// <summary>
            /// Sets YearlySuffix.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public SnapshotNamingEntity WithYearlySuffix(in Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.YearlySuffixEntity value)
            {
                return this.SetProperty(YearlySuffixJsonPropertyName, value);
            }

            private static ValidationContext __CorvusValidateComponentSeparator(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
            {
                return property.ValueAs<Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.ComponentSeparatorEntity>().Validate(validationContext, level);
            }

            private static ValidationContext __CorvusValidatePrefix(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
            {
                return property.ValueAs<Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.PrefixEntity>().Validate(validationContext, level);
            }

            private static ValidationContext __CorvusValidateTimestampFormatString(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
            {
                return property.ValueAs<Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.TimestampFormatStringEntity>().Validate(validationContext, level);
            }

            private static ValidationContext __CorvusValidateFrequentSuffix(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
            {
                return property.ValueAs<Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.FrequentSuffixEntity>().Validate(validationContext, level);
            }

            private static ValidationContext __CorvusValidateHourlySuffix(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
            {
                return property.ValueAs<Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.HourlySuffixEntity>().Validate(validationContext, level);
            }

            private static ValidationContext __CorvusValidateDailySuffix(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
            {
                return property.ValueAs<Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.DailySuffixEntity>().Validate(validationContext, level);
            }

            private static ValidationContext __CorvusValidateWeeklySuffix(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
            {
                return property.ValueAs<Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.WeeklySuffixEntity>().Validate(validationContext, level);
            }

            private static ValidationContext __CorvusValidateMonthlySuffix(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
            {
                return property.ValueAs<Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.MonthlySuffixEntity>().Validate(validationContext, level);
            }

            private static ValidationContext __CorvusValidateYearlySuffix(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
            {
                return property.ValueAs<Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity.YearlySuffixEntity>().Validate(validationContext, level);
            }

            /// <summary>
            /// Tries to get the validator for the given property.
            /// </summary>
            /// <param name = "property">The property for which to get the validator.</param>
            /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
            /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
            /// <returns><c>True</c> if the validator was found.</returns>
            private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
            {
                if (hasJsonElementBacking)
                {
                    if (property.NameEquals(ComponentSeparatorUtf8JsonPropertyName.Span))
                    {
                        propertyValidator = __CorvusValidateComponentSeparator;
                        return true;
                    }
                    else if (property.NameEquals(PrefixUtf8JsonPropertyName.Span))
                    {
                        propertyValidator = __CorvusValidatePrefix;
                        return true;
                    }
                    else if (property.NameEquals(TimestampFormatStringUtf8JsonPropertyName.Span))
                    {
                        propertyValidator = __CorvusValidateTimestampFormatString;
                        return true;
                    }
                    else if (property.NameEquals(FrequentSuffixUtf8JsonPropertyName.Span))
                    {
                        propertyValidator = __CorvusValidateFrequentSuffix;
                        return true;
                    }
                    else if (property.NameEquals(HourlySuffixUtf8JsonPropertyName.Span))
                    {
                        propertyValidator = __CorvusValidateHourlySuffix;
                        return true;
                    }
                    else if (property.NameEquals(DailySuffixUtf8JsonPropertyName.Span))
                    {
                        propertyValidator = __CorvusValidateDailySuffix;
                        return true;
                    }
                    else if (property.NameEquals(WeeklySuffixUtf8JsonPropertyName.Span))
                    {
                        propertyValidator = __CorvusValidateWeeklySuffix;
                        return true;
                    }
                    else if (property.NameEquals(MonthlySuffixUtf8JsonPropertyName.Span))
                    {
                        propertyValidator = __CorvusValidateMonthlySuffix;
                        return true;
                    }
                    else if (property.NameEquals(YearlySuffixUtf8JsonPropertyName.Span))
                    {
                        propertyValidator = __CorvusValidateYearlySuffix;
                        return true;
                    }
                }
                else
                {
                    if (property.NameEquals(ComponentSeparatorJsonPropertyName))
                    {
                        propertyValidator = __CorvusValidateComponentSeparator;
                        return true;
                    }
                    else if (property.NameEquals(PrefixJsonPropertyName))
                    {
                        propertyValidator = __CorvusValidatePrefix;
                        return true;
                    }
                    else if (property.NameEquals(TimestampFormatStringJsonPropertyName))
                    {
                        propertyValidator = __CorvusValidateTimestampFormatString;
                        return true;
                    }
                    else if (property.NameEquals(FrequentSuffixJsonPropertyName))
                    {
                        propertyValidator = __CorvusValidateFrequentSuffix;
                        return true;
                    }
                    else if (property.NameEquals(HourlySuffixJsonPropertyName))
                    {
                        propertyValidator = __CorvusValidateHourlySuffix;
                        return true;
                    }
                    else if (property.NameEquals(DailySuffixJsonPropertyName))
                    {
                        propertyValidator = __CorvusValidateDailySuffix;
                        return true;
                    }
                    else if (property.NameEquals(WeeklySuffixJsonPropertyName))
                    {
                        propertyValidator = __CorvusValidateWeeklySuffix;
                        return true;
                    }
                    else if (property.NameEquals(MonthlySuffixJsonPropertyName))
                    {
                        propertyValidator = __CorvusValidateMonthlySuffix;
                        return true;
                    }
                    else if (property.NameEquals(YearlySuffixJsonPropertyName))
                    {
                        propertyValidator = __CorvusValidateYearlySuffix;
                        return true;
                    }
                }

                propertyValidator = null;
                return false;
            }
        }
    }
}