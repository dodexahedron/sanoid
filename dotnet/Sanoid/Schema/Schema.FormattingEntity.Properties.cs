//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Sanoid.Schema;
public readonly partial struct Schema
{
    /// <summary>
    /// A type generated from a JsonSchema specification.
    /// </summary>
    public readonly partial struct FormattingEntity
    {
        /// <summary>
        /// JSON property name for <see cref = "SnapshotNaming"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> SnapshotNamingUtf8JsonPropertyName = new byte[]{83, 110, 97, 112, 115, 104, 111, 116, 78, 97, 109, 105, 110, 103};
        /// <summary>
        /// JSON property name for <see cref = "SnapshotNaming"/>.
        /// </summary>
        public const string SnapshotNamingJsonPropertyName = "SnapshotNaming";
        /// <summary>
        /// Gets SnapshotNaming.
        /// </summary>
        public Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity SnapshotNaming
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(SnapshotNamingUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(SnapshotNamingJsonPropertyName, out JsonAny result))
                    {
                        return result.As<Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Creates an instance of a <see cref = "FormattingEntity"/>.
        /// </summary>
        public static FormattingEntity Create(Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity snapshotNaming)
        {
            var builder = ImmutableDictionary.CreateBuilder<JsonPropertyName, JsonAny>();
            builder.Add(SnapshotNamingJsonPropertyName, snapshotNaming.AsAny);
            return builder.ToImmutable();
        }

        /// <summary>
        /// Sets SnapshotNaming.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public FormattingEntity WithSnapshotNaming(in Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity value)
        {
            return this.SetProperty(SnapshotNamingJsonPropertyName, value);
        }

        private static ValidationContext __CorvusValidateSnapshotNaming(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Sanoid.Schema.Schema.FormattingEntity.SnapshotNamingEntity>().Validate(validationContext, level);
        }

        /// <summary>
        /// Tries to get the validator for the given property.
        /// </summary>
        /// <param name = "property">The property for which to get the validator.</param>
        /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
        /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
        /// <returns><c>True</c> if the validator was found.</returns>
        private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
        {
            if (hasJsonElementBacking)
            {
                if (property.NameEquals(SnapshotNamingUtf8JsonPropertyName.Span))
                {
                    propertyValidator = __CorvusValidateSnapshotNaming;
                    return true;
                }
            }
            else
            {
                if (property.NameEquals(SnapshotNamingJsonPropertyName))
                {
                    propertyValidator = __CorvusValidateSnapshotNaming;
                    return true;
                }
            }

            propertyValidator = null;
            return false;
        }
    }
}