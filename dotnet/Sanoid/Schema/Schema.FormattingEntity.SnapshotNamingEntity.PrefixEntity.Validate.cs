//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Text.Json;
using Corvus.Json;

namespace Sanoid.Schema;
public readonly partial struct Schema
{
    public readonly partial struct FormattingEntity
    {
        public readonly partial struct SnapshotNamingEntity
        {
            /// <summary>
            /// A type generated from a JsonSchema specification.
            /// </summary>
            public readonly partial struct PrefixEntity
            {
                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext validationContext, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext;
                    if (level > ValidationLevel.Flag)
                    {
                        result = result.UsingResults();
                    }

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.UsingStack();
                        result = result.PushSchemaLocation("https://endjin.com/home/bthetford/Dev/sanoid/dotnet/Sanoid/Schema/Sanoid.schema.json#/definitions/Formatting/SnapshotNaming/properties/Prefix");
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = this.ValidateType(valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    result = Corvus.Json.Validate.ValidateString(this, result, level, null, null, __CorvusPatternExpression);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    if (level != ValidationLevel.Flag)
                    {
                        result = result.PopLocation();
                    }

                    return result;
                }
            }
        }
    }
}