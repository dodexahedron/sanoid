//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Sanoid.Schema;
public readonly partial struct Schema
{
    /// <summary>
    /// A type generated from a JsonSchema specification.
    /// </summary>
    public readonly partial struct PlatformUtilitiesEntity
    {
        /// <summary>
        /// JSON property name for <see cref = "Ps"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> PsUtf8JsonPropertyName = new byte[]{112, 115};
        /// <summary>
        /// JSON property name for <see cref = "Ps"/>.
        /// </summary>
        public const string PsJsonPropertyName = "ps";
        /// <summary>
        /// JSON property name for <see cref = "Zfs"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> ZfsUtf8JsonPropertyName = new byte[]{122, 102, 115};
        /// <summary>
        /// JSON property name for <see cref = "Zfs"/>.
        /// </summary>
        public const string ZfsJsonPropertyName = "zfs";
        /// <summary>
        /// JSON property name for <see cref = "Zpool"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> ZpoolUtf8JsonPropertyName = new byte[]{122, 112, 111, 111, 108};
        /// <summary>
        /// JSON property name for <see cref = "Zpool"/>.
        /// </summary>
        public const string ZpoolJsonPropertyName = "zpool";
        /// <summary>
        /// Gets Ps.
        /// </summary>
        public Sanoid.Schema.Schema.PlatformUtilitiesEntity.PsEntity Ps
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(PsUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Sanoid.Schema.Schema.PlatformUtilitiesEntity.PsEntity(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(PsJsonPropertyName, out JsonAny result))
                    {
                        return result.As<Sanoid.Schema.Schema.PlatformUtilitiesEntity.PsEntity>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets Zfs.
        /// </summary>
        public Sanoid.Schema.Schema.PlatformUtilitiesEntity.ZfsEntity Zfs
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(ZfsUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Sanoid.Schema.Schema.PlatformUtilitiesEntity.ZfsEntity(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(ZfsJsonPropertyName, out JsonAny result))
                    {
                        return result.As<Sanoid.Schema.Schema.PlatformUtilitiesEntity.ZfsEntity>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets Zpool.
        /// </summary>
        public Sanoid.Schema.Schema.PlatformUtilitiesEntity.ZpoolEntity Zpool
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(ZpoolUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Sanoid.Schema.Schema.PlatformUtilitiesEntity.ZpoolEntity(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(ZpoolJsonPropertyName, out JsonAny result))
                    {
                        return result.As<Sanoid.Schema.Schema.PlatformUtilitiesEntity.ZpoolEntity>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Creates an instance of a <see cref = "PlatformUtilitiesEntity"/>.
        /// </summary>
        public static PlatformUtilitiesEntity Create(Sanoid.Schema.Schema.PlatformUtilitiesEntity.PsEntity ps, Sanoid.Schema.Schema.PlatformUtilitiesEntity.ZfsEntity zfs, Sanoid.Schema.Schema.PlatformUtilitiesEntity.ZpoolEntity zpool)
        {
            var builder = ImmutableDictionary.CreateBuilder<JsonPropertyName, JsonAny>();
            builder.Add(PsJsonPropertyName, ps.AsAny);
            builder.Add(ZfsJsonPropertyName, zfs.AsAny);
            builder.Add(ZpoolJsonPropertyName, zpool.AsAny);
            return builder.ToImmutable();
        }

        /// <summary>
        /// Sets ps.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public PlatformUtilitiesEntity WithPs(in Sanoid.Schema.Schema.PlatformUtilitiesEntity.PsEntity value)
        {
            return this.SetProperty(PsJsonPropertyName, value);
        }

        /// <summary>
        /// Sets zfs.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public PlatformUtilitiesEntity WithZfs(in Sanoid.Schema.Schema.PlatformUtilitiesEntity.ZfsEntity value)
        {
            return this.SetProperty(ZfsJsonPropertyName, value);
        }

        /// <summary>
        /// Sets zpool.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public PlatformUtilitiesEntity WithZpool(in Sanoid.Schema.Schema.PlatformUtilitiesEntity.ZpoolEntity value)
        {
            return this.SetProperty(ZpoolJsonPropertyName, value);
        }

        private static ValidationContext __CorvusValidatePs(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Sanoid.Schema.Schema.PlatformUtilitiesEntity.PsEntity>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateZfs(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Sanoid.Schema.Schema.PlatformUtilitiesEntity.ZfsEntity>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateZpool(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Sanoid.Schema.Schema.PlatformUtilitiesEntity.ZpoolEntity>().Validate(validationContext, level);
        }

        /// <summary>
        /// Tries to get the validator for the given property.
        /// </summary>
        /// <param name = "property">The property for which to get the validator.</param>
        /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
        /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
        /// <returns><c>True</c> if the validator was found.</returns>
        private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
        {
            if (hasJsonElementBacking)
            {
                if (property.NameEquals(PsUtf8JsonPropertyName.Span))
                {
                    propertyValidator = __CorvusValidatePs;
                    return true;
                }
                else if (property.NameEquals(ZfsUtf8JsonPropertyName.Span))
                {
                    propertyValidator = __CorvusValidateZfs;
                    return true;
                }
                else if (property.NameEquals(ZpoolUtf8JsonPropertyName.Span))
                {
                    propertyValidator = __CorvusValidateZpool;
                    return true;
                }
            }
            else
            {
                if (property.NameEquals(PsJsonPropertyName))
                {
                    propertyValidator = __CorvusValidatePs;
                    return true;
                }
                else if (property.NameEquals(ZfsJsonPropertyName))
                {
                    propertyValidator = __CorvusValidateZfs;
                    return true;
                }
                else if (property.NameEquals(ZpoolJsonPropertyName))
                {
                    propertyValidator = __CorvusValidateZpool;
                    return true;
                }
            }

            propertyValidator = null;
            return false;
        }
    }
}