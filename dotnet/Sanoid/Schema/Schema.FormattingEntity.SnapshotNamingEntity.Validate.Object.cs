//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Text;
using System.Text.Json;
using System.Text.RegularExpressions;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Sanoid.Schema;
public readonly partial struct Schema
{
    public readonly partial struct FormattingEntity
    {
        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly partial struct SnapshotNamingEntity
        {
            private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                if (valueKind != JsonValueKind.Object)
                {
                    return result;
                }

                int propertyCount = 0;
                bool foundComponentSeparator = false;
                bool foundPrefix = false;
                bool foundTimestampFormatString = false;
                bool foundFrequentSuffix = false;
                bool foundHourlySuffix = false;
                bool foundDailySuffix = false;
                bool foundWeeklySuffix = false;
                bool foundMonthlySuffix = false;
                bool foundYearlySuffix = false;
                foreach (JsonObjectProperty property in this.EnumerateObject())
                {
                    if (__TryGetCorvusLocalPropertiesValidator(property, this.HasJsonElementBacking, out ObjectPropertyValidator? propertyValidator))
                    {
                        result = result.WithLocalProperty(propertyCount);
                        if (level > ValidationLevel.Basic)
                        {
                            result = result.PushDocumentProperty("properties", property.Name);
                        }

                        var propertyResult = propertyValidator(property, result.CreateChildContext(), level);
                        result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                        if (level > ValidationLevel.Basic)
                        {
                            result = result.PopLocation(); // property name
                        }

                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        if ((this.HasJsonElementBacking && property.NameEquals(ComponentSeparatorUtf8JsonPropertyName.Span)) || (!this.HasJsonElementBacking && property.NameEquals(ComponentSeparatorJsonPropertyName)))
                        {
                            foundComponentSeparator = true;
                        }
                        else if ((this.HasJsonElementBacking && property.NameEquals(PrefixUtf8JsonPropertyName.Span)) || (!this.HasJsonElementBacking && property.NameEquals(PrefixJsonPropertyName)))
                        {
                            foundPrefix = true;
                        }
                        else if ((this.HasJsonElementBacking && property.NameEquals(TimestampFormatStringUtf8JsonPropertyName.Span)) || (!this.HasJsonElementBacking && property.NameEquals(TimestampFormatStringJsonPropertyName)))
                        {
                            foundTimestampFormatString = true;
                        }
                        else if ((this.HasJsonElementBacking && property.NameEquals(FrequentSuffixUtf8JsonPropertyName.Span)) || (!this.HasJsonElementBacking && property.NameEquals(FrequentSuffixJsonPropertyName)))
                        {
                            foundFrequentSuffix = true;
                        }
                        else if ((this.HasJsonElementBacking && property.NameEquals(HourlySuffixUtf8JsonPropertyName.Span)) || (!this.HasJsonElementBacking && property.NameEquals(HourlySuffixJsonPropertyName)))
                        {
                            foundHourlySuffix = true;
                        }
                        else if ((this.HasJsonElementBacking && property.NameEquals(DailySuffixUtf8JsonPropertyName.Span)) || (!this.HasJsonElementBacking && property.NameEquals(DailySuffixJsonPropertyName)))
                        {
                            foundDailySuffix = true;
                        }
                        else if ((this.HasJsonElementBacking && property.NameEquals(WeeklySuffixUtf8JsonPropertyName.Span)) || (!this.HasJsonElementBacking && property.NameEquals(WeeklySuffixJsonPropertyName)))
                        {
                            foundWeeklySuffix = true;
                        }
                        else if ((this.HasJsonElementBacking && property.NameEquals(MonthlySuffixUtf8JsonPropertyName.Span)) || (!this.HasJsonElementBacking && property.NameEquals(MonthlySuffixJsonPropertyName)))
                        {
                            foundMonthlySuffix = true;
                        }
                        else if ((this.HasJsonElementBacking && property.NameEquals(YearlySuffixUtf8JsonPropertyName.Span)) || (!this.HasJsonElementBacking && property.NameEquals(YearlySuffixJsonPropertyName)))
                        {
                            foundYearlySuffix = true;
                        }
                    }

                    propertyCount++;
                }

                return result;
            }
        }
    }
}