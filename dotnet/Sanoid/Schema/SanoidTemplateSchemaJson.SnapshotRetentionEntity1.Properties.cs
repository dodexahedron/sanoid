//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Sanoid.Schema;
public readonly partial struct SanoidTemplateSchemaJson
{
    /// <summary>
    /// A type generated from a JsonSchema specification.
    /// </summary>
    public readonly partial struct SnapshotRetentionEntity1
    {
        /// <summary>
        /// JSON property name for <see cref = "Frequent"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> FrequentUtf8JsonPropertyName = new byte[]{70, 114, 101, 113, 117, 101, 110, 116};
        /// <summary>
        /// JSON property name for <see cref = "Frequent"/>.
        /// </summary>
        public const string FrequentJsonPropertyName = "Frequent";
        /// <summary>
        /// JSON property name for <see cref = "Hourly"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> HourlyUtf8JsonPropertyName = new byte[]{72, 111, 117, 114, 108, 121};
        /// <summary>
        /// JSON property name for <see cref = "Hourly"/>.
        /// </summary>
        public const string HourlyJsonPropertyName = "Hourly";
        /// <summary>
        /// JSON property name for <see cref = "Daily"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> DailyUtf8JsonPropertyName = new byte[]{68, 97, 105, 108, 121};
        /// <summary>
        /// JSON property name for <see cref = "Daily"/>.
        /// </summary>
        public const string DailyJsonPropertyName = "Daily";
        /// <summary>
        /// JSON property name for <see cref = "Weekly"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> WeeklyUtf8JsonPropertyName = new byte[]{87, 101, 101, 107, 108, 121};
        /// <summary>
        /// JSON property name for <see cref = "Weekly"/>.
        /// </summary>
        public const string WeeklyJsonPropertyName = "Weekly";
        /// <summary>
        /// JSON property name for <see cref = "Monthly"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> MonthlyUtf8JsonPropertyName = new byte[]{77, 111, 110, 116, 104, 108, 121};
        /// <summary>
        /// JSON property name for <see cref = "Monthly"/>.
        /// </summary>
        public const string MonthlyJsonPropertyName = "Monthly";
        /// <summary>
        /// JSON property name for <see cref = "Yearly"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> YearlyUtf8JsonPropertyName = new byte[]{89, 101, 97, 114, 108, 121};
        /// <summary>
        /// JSON property name for <see cref = "Yearly"/>.
        /// </summary>
        public const string YearlyJsonPropertyName = "Yearly";
        /// <summary>
        /// JSON property name for <see cref = "PruneDeferral"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> PruneDeferralUtf8JsonPropertyName = new byte[]{80, 114, 117, 110, 101, 68, 101, 102, 101, 114, 114, 97, 108};
        /// <summary>
        /// JSON property name for <see cref = "PruneDeferral"/>.
        /// </summary>
        public const string PruneDeferralJsonPropertyName = "PruneDeferral";
        /// <summary>
        /// Gets Frequent.
        /// </summary>
        public Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity1.FrequentEntity Frequent
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(FrequentUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity1.FrequentEntity(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(FrequentJsonPropertyName, out JsonAny result))
                    {
                        return result.As<Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity1.FrequentEntity>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets Hourly.
        /// </summary>
        public Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity1.HourlyEntity Hourly
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(HourlyUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity1.HourlyEntity(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(HourlyJsonPropertyName, out JsonAny result))
                    {
                        return result.As<Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity1.HourlyEntity>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets Daily.
        /// </summary>
        public Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity1.DailyEntity Daily
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(DailyUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity1.DailyEntity(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(DailyJsonPropertyName, out JsonAny result))
                    {
                        return result.As<Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity1.DailyEntity>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets Weekly.
        /// </summary>
        public Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity1.WeeklyEntity Weekly
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(WeeklyUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity1.WeeklyEntity(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(WeeklyJsonPropertyName, out JsonAny result))
                    {
                        return result.As<Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity1.WeeklyEntity>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets Monthly.
        /// </summary>
        public Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity1.MonthlyEntity Monthly
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(MonthlyUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity1.MonthlyEntity(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(MonthlyJsonPropertyName, out JsonAny result))
                    {
                        return result.As<Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity1.MonthlyEntity>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets Yearly.
        /// </summary>
        public Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity1.YearlyEntity Yearly
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(YearlyUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity1.YearlyEntity(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(YearlyJsonPropertyName, out JsonAny result))
                    {
                        return result.As<Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity1.YearlyEntity>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets PruneDeferral.
        /// </summary>
        public Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity1.PruneDeferralEntity PruneDeferral
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(PruneDeferralUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity1.PruneDeferralEntity(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(PruneDeferralJsonPropertyName, out JsonAny result))
                    {
                        return result.As<Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity1.PruneDeferralEntity>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Creates an instance of a <see cref = "SnapshotRetentionEntity1"/>.
        /// </summary>
        public static SnapshotRetentionEntity1 Create(Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity1.FrequentEntity? frequent = null, Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity1.HourlyEntity? hourly = null, Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity1.DailyEntity? daily = null, Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity1.WeeklyEntity? weekly = null, Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity1.MonthlyEntity? monthly = null, Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity1.YearlyEntity? yearly = null, Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity1.PruneDeferralEntity? pruneDeferral = null)
        {
            var builder = ImmutableDictionary.CreateBuilder<JsonPropertyName, JsonAny>();
            if (frequent is Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity1.FrequentEntity frequent__)
            {
                builder.Add(FrequentJsonPropertyName, frequent__.AsAny);
            }

            if (hourly is Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity1.HourlyEntity hourly__)
            {
                builder.Add(HourlyJsonPropertyName, hourly__.AsAny);
            }

            if (daily is Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity1.DailyEntity daily__)
            {
                builder.Add(DailyJsonPropertyName, daily__.AsAny);
            }

            if (weekly is Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity1.WeeklyEntity weekly__)
            {
                builder.Add(WeeklyJsonPropertyName, weekly__.AsAny);
            }

            if (monthly is Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity1.MonthlyEntity monthly__)
            {
                builder.Add(MonthlyJsonPropertyName, monthly__.AsAny);
            }

            if (yearly is Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity1.YearlyEntity yearly__)
            {
                builder.Add(YearlyJsonPropertyName, yearly__.AsAny);
            }

            if (pruneDeferral is Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity1.PruneDeferralEntity pruneDeferral__)
            {
                builder.Add(PruneDeferralJsonPropertyName, pruneDeferral__.AsAny);
            }

            return builder.ToImmutable();
        }

        /// <summary>
        /// Sets Frequent.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public SnapshotRetentionEntity1 WithFrequent(in Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity1.FrequentEntity value)
        {
            return this.SetProperty(FrequentJsonPropertyName, value);
        }

        /// <summary>
        /// Sets Hourly.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public SnapshotRetentionEntity1 WithHourly(in Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity1.HourlyEntity value)
        {
            return this.SetProperty(HourlyJsonPropertyName, value);
        }

        /// <summary>
        /// Sets Daily.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public SnapshotRetentionEntity1 WithDaily(in Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity1.DailyEntity value)
        {
            return this.SetProperty(DailyJsonPropertyName, value);
        }

        /// <summary>
        /// Sets Weekly.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public SnapshotRetentionEntity1 WithWeekly(in Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity1.WeeklyEntity value)
        {
            return this.SetProperty(WeeklyJsonPropertyName, value);
        }

        /// <summary>
        /// Sets Monthly.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public SnapshotRetentionEntity1 WithMonthly(in Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity1.MonthlyEntity value)
        {
            return this.SetProperty(MonthlyJsonPropertyName, value);
        }

        /// <summary>
        /// Sets Yearly.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public SnapshotRetentionEntity1 WithYearly(in Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity1.YearlyEntity value)
        {
            return this.SetProperty(YearlyJsonPropertyName, value);
        }

        /// <summary>
        /// Sets PruneDeferral.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public SnapshotRetentionEntity1 WithPruneDeferral(in Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity1.PruneDeferralEntity value)
        {
            return this.SetProperty(PruneDeferralJsonPropertyName, value);
        }

        private static ValidationContext __CorvusValidateFrequent(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity1.FrequentEntity>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateHourly(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity1.HourlyEntity>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateDaily(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity1.DailyEntity>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateWeekly(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity1.WeeklyEntity>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateMonthly(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity1.MonthlyEntity>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateYearly(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity1.YearlyEntity>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidatePruneDeferral(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity1.PruneDeferralEntity>().Validate(validationContext, level);
        }

        /// <summary>
        /// Tries to get the validator for the given property.
        /// </summary>
        /// <param name = "property">The property for which to get the validator.</param>
        /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
        /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
        /// <returns><c>True</c> if the validator was found.</returns>
        private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
        {
            if (hasJsonElementBacking)
            {
                if (property.NameEquals(FrequentUtf8JsonPropertyName.Span))
                {
                    propertyValidator = __CorvusValidateFrequent;
                    return true;
                }
                else if (property.NameEquals(HourlyUtf8JsonPropertyName.Span))
                {
                    propertyValidator = __CorvusValidateHourly;
                    return true;
                }
                else if (property.NameEquals(DailyUtf8JsonPropertyName.Span))
                {
                    propertyValidator = __CorvusValidateDaily;
                    return true;
                }
                else if (property.NameEquals(WeeklyUtf8JsonPropertyName.Span))
                {
                    propertyValidator = __CorvusValidateWeekly;
                    return true;
                }
                else if (property.NameEquals(MonthlyUtf8JsonPropertyName.Span))
                {
                    propertyValidator = __CorvusValidateMonthly;
                    return true;
                }
                else if (property.NameEquals(YearlyUtf8JsonPropertyName.Span))
                {
                    propertyValidator = __CorvusValidateYearly;
                    return true;
                }
                else if (property.NameEquals(PruneDeferralUtf8JsonPropertyName.Span))
                {
                    propertyValidator = __CorvusValidatePruneDeferral;
                    return true;
                }
            }
            else
            {
                if (property.NameEquals(FrequentJsonPropertyName))
                {
                    propertyValidator = __CorvusValidateFrequent;
                    return true;
                }
                else if (property.NameEquals(HourlyJsonPropertyName))
                {
                    propertyValidator = __CorvusValidateHourly;
                    return true;
                }
                else if (property.NameEquals(DailyJsonPropertyName))
                {
                    propertyValidator = __CorvusValidateDaily;
                    return true;
                }
                else if (property.NameEquals(WeeklyJsonPropertyName))
                {
                    propertyValidator = __CorvusValidateWeekly;
                    return true;
                }
                else if (property.NameEquals(MonthlyJsonPropertyName))
                {
                    propertyValidator = __CorvusValidateMonthly;
                    return true;
                }
                else if (property.NameEquals(YearlyJsonPropertyName))
                {
                    propertyValidator = __CorvusValidateYearly;
                    return true;
                }
                else if (property.NameEquals(PruneDeferralJsonPropertyName))
                {
                    propertyValidator = __CorvusValidatePruneDeferral;
                    return true;
                }
            }

            propertyValidator = null;
            return false;
        }
    }
}