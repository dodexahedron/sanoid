//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Sanoid.Schema;
/// <summary>
/// A type generated from a JsonSchema specification.
/// </summary>
public readonly partial struct Schema
{
    /// <summary>
    /// JSON property name for <see cref = "UseSanoidConfiguration"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> UseSanoidConfigurationUtf8JsonPropertyName = new byte[]{85, 115, 101, 83, 97, 110, 111, 105, 100, 67, 111, 110, 102, 105, 103, 117, 114, 97, 116, 105, 111, 110};
    /// <summary>
    /// JSON property name for <see cref = "UseSanoidConfiguration"/>.
    /// </summary>
    public const string UseSanoidConfigurationJsonPropertyName = "UseSanoidConfiguration";
    /// <summary>
    /// JSON property name for <see cref = "SanoidConfigurationPathBase"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> SanoidConfigurationPathBaseUtf8JsonPropertyName = new byte[]{83, 97, 110, 111, 105, 100, 67, 111, 110, 102, 105, 103, 117, 114, 97, 116, 105, 111, 110, 80, 97, 116, 104, 66, 97, 115, 101};
    /// <summary>
    /// JSON property name for <see cref = "SanoidConfigurationPathBase"/>.
    /// </summary>
    public const string SanoidConfigurationPathBaseJsonPropertyName = "SanoidConfigurationPathBase";
    /// <summary>
    /// JSON property name for <see cref = "SanoidConfigurationDefaultsFile"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> SanoidConfigurationDefaultsFileUtf8JsonPropertyName = new byte[]{83, 97, 110, 111, 105, 100, 67, 111, 110, 102, 105, 103, 117, 114, 97, 116, 105, 111, 110, 68, 101, 102, 97, 117, 108, 116, 115, 70, 105, 108, 101};
    /// <summary>
    /// JSON property name for <see cref = "SanoidConfigurationDefaultsFile"/>.
    /// </summary>
    public const string SanoidConfigurationDefaultsFileJsonPropertyName = "SanoidConfigurationDefaultsFile";
    /// <summary>
    /// JSON property name for <see cref = "SanoidConfigurationLocalFile"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> SanoidConfigurationLocalFileUtf8JsonPropertyName = new byte[]{83, 97, 110, 111, 105, 100, 67, 111, 110, 102, 105, 103, 117, 114, 97, 116, 105, 111, 110, 76, 111, 99, 97, 108, 70, 105, 108, 101};
    /// <summary>
    /// JSON property name for <see cref = "SanoidConfigurationLocalFile"/>.
    /// </summary>
    public const string SanoidConfigurationLocalFileJsonPropertyName = "SanoidConfigurationLocalFile";
    /// <summary>
    /// JSON property name for <see cref = "Formatting"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> FormattingUtf8JsonPropertyName = new byte[]{70, 111, 114, 109, 97, 116, 116, 105, 110, 103};
    /// <summary>
    /// JSON property name for <see cref = "Formatting"/>.
    /// </summary>
    public const string FormattingJsonPropertyName = "Formatting";
    /// <summary>
    /// JSON property name for <see cref = "Monitoring"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> MonitoringUtf8JsonPropertyName = new byte[]{77, 111, 110, 105, 116, 111, 114, 105, 110, 103};
    /// <summary>
    /// JSON property name for <see cref = "Monitoring"/>.
    /// </summary>
    public const string MonitoringJsonPropertyName = "Monitoring";
    /// <summary>
    /// JSON property name for <see cref = "TakeSnapshots"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> TakeSnapshotsUtf8JsonPropertyName = new byte[]{84, 97, 107, 101, 83, 110, 97, 112, 115, 104, 111, 116, 115};
    /// <summary>
    /// JSON property name for <see cref = "TakeSnapshots"/>.
    /// </summary>
    public const string TakeSnapshotsJsonPropertyName = "TakeSnapshots";
    /// <summary>
    /// JSON property name for <see cref = "PruneSnapshots"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> PruneSnapshotsUtf8JsonPropertyName = new byte[]{80, 114, 117, 110, 101, 83, 110, 97, 112, 115, 104, 111, 116, 115};
    /// <summary>
    /// JSON property name for <see cref = "PruneSnapshots"/>.
    /// </summary>
    public const string PruneSnapshotsJsonPropertyName = "PruneSnapshots";
    /// <summary>
    /// JSON property name for <see cref = "PlatformUtilities"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> PlatformUtilitiesUtf8JsonPropertyName = new byte[]{80, 108, 97, 116, 102, 111, 114, 109, 85, 116, 105, 108, 105, 116, 105, 101, 115};
    /// <summary>
    /// JSON property name for <see cref = "PlatformUtilities"/>.
    /// </summary>
    public const string PlatformUtilitiesJsonPropertyName = "PlatformUtilities";
    /// <summary>
    /// JSON property name for <see cref = "Id"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> IdUtf8JsonPropertyName = new byte[]{36, 105, 100};
    /// <summary>
    /// JSON property name for <see cref = "Id"/>.
    /// </summary>
    public const string IdJsonPropertyName = "$id";
    /// <summary>
    /// JSON property name for <see cref = "Comments"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> CommentsUtf8JsonPropertyName = new byte[]{36, 99, 111, 109, 109, 101, 110, 116, 115};
    /// <summary>
    /// JSON property name for <see cref = "Comments"/>.
    /// </summary>
    public const string CommentsJsonPropertyName = "$comments";
    /// <summary>
    /// JSON property name for <see cref = "SanoidConfigurationCacheDirectory"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> SanoidConfigurationCacheDirectoryUtf8JsonPropertyName = new byte[]{83, 97, 110, 111, 105, 100, 67, 111, 110, 102, 105, 103, 117, 114, 97, 116, 105, 111, 110, 67, 97, 99, 104, 101, 68, 105, 114, 101, 99, 116, 111, 114, 121};
    /// <summary>
    /// JSON property name for <see cref = "SanoidConfigurationCacheDirectory"/>.
    /// </summary>
    public const string SanoidConfigurationCacheDirectoryJsonPropertyName = "SanoidConfigurationCacheDirectory";
    /// <summary>
    /// JSON property name for <see cref = "SanoidConfigurationRunDirectory"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> SanoidConfigurationRunDirectoryUtf8JsonPropertyName = new byte[]{83, 97, 110, 111, 105, 100, 67, 111, 110, 102, 105, 103, 117, 114, 97, 116, 105, 111, 110, 82, 117, 110, 68, 105, 114, 101, 99, 116, 111, 114, 121};
    /// <summary>
    /// JSON property name for <see cref = "SanoidConfigurationRunDirectory"/>.
    /// </summary>
    public const string SanoidConfigurationRunDirectoryJsonPropertyName = "SanoidConfigurationRunDirectory";
    /// <summary>
    /// JSON property name for <see cref = "ForcePruneSnapshots"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> ForcePruneSnapshotsUtf8JsonPropertyName = new byte[]{70, 111, 114, 99, 101, 80, 114, 117, 110, 101, 83, 110, 97, 112, 115, 104, 111, 116, 115};
    /// <summary>
    /// JSON property name for <see cref = "ForcePruneSnapshots"/>.
    /// </summary>
    public const string ForcePruneSnapshotsJsonPropertyName = "ForcePruneSnapshots";
    /// <summary>
    /// JSON property name for <see cref = "Templates"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> TemplatesUtf8JsonPropertyName = new byte[]{84, 101, 109, 112, 108, 97, 116, 101, 115};
    /// <summary>
    /// JSON property name for <see cref = "Templates"/>.
    /// </summary>
    public const string TemplatesJsonPropertyName = "Templates";
    /// <summary>
    /// JSON property name for <see cref = "Datasets"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> DatasetsUtf8JsonPropertyName = new byte[]{68, 97, 116, 97, 115, 101, 116, 115};
    /// <summary>
    /// JSON property name for <see cref = "Datasets"/>.
    /// </summary>
    public const string DatasetsJsonPropertyName = "Datasets";
    /// <summary>
    /// Gets UseSanoidConfiguration.
    /// </summary>
    public Sanoid.Schema.Schema.UseSanoidConfigurationEntity UseSanoidConfiguration
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(UseSanoidConfigurationUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Sanoid.Schema.Schema.UseSanoidConfigurationEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(UseSanoidConfigurationJsonPropertyName, out JsonAny result))
                {
                    return result.As<Sanoid.Schema.Schema.UseSanoidConfigurationEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets SanoidConfigurationPathBase.
    /// </summary>
    public Sanoid.Schema.Schema.SanoidConfigurationPathBaseEntity SanoidConfigurationPathBase
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(SanoidConfigurationPathBaseUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Sanoid.Schema.Schema.SanoidConfigurationPathBaseEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(SanoidConfigurationPathBaseJsonPropertyName, out JsonAny result))
                {
                    return result.As<Sanoid.Schema.Schema.SanoidConfigurationPathBaseEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets SanoidConfigurationDefaultsFile.
    /// </summary>
    public Sanoid.Schema.Schema.SanoidConfigurationDefaultsFileEntity SanoidConfigurationDefaultsFile
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(SanoidConfigurationDefaultsFileUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Sanoid.Schema.Schema.SanoidConfigurationDefaultsFileEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(SanoidConfigurationDefaultsFileJsonPropertyName, out JsonAny result))
                {
                    return result.As<Sanoid.Schema.Schema.SanoidConfigurationDefaultsFileEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets SanoidConfigurationLocalFile.
    /// </summary>
    public Sanoid.Schema.Schema.SanoidConfigurationLocalFileEntity SanoidConfigurationLocalFile
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(SanoidConfigurationLocalFileUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Sanoid.Schema.Schema.SanoidConfigurationLocalFileEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(SanoidConfigurationLocalFileJsonPropertyName, out JsonAny result))
                {
                    return result.As<Sanoid.Schema.Schema.SanoidConfigurationLocalFileEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Formatting.
    /// </summary>
    public Sanoid.Schema.Schema.FormattingEntity Formatting
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(FormattingUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Sanoid.Schema.Schema.FormattingEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(FormattingJsonPropertyName, out JsonAny result))
                {
                    return result.As<Sanoid.Schema.Schema.FormattingEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Monitoring.
    /// </summary>
    public Sanoid.Schema.Schema.MonitoringEntity Monitoring
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(MonitoringUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Sanoid.Schema.Schema.MonitoringEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(MonitoringJsonPropertyName, out JsonAny result))
                {
                    return result.As<Sanoid.Schema.Schema.MonitoringEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets TakeSnapshots.
    /// </summary>
    public Sanoid.Schema.Schema.TakeSnapshotsEntity TakeSnapshots
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(TakeSnapshotsUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Sanoid.Schema.Schema.TakeSnapshotsEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(TakeSnapshotsJsonPropertyName, out JsonAny result))
                {
                    return result.As<Sanoid.Schema.Schema.TakeSnapshotsEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets PruneSnapshots.
    /// </summary>
    public Sanoid.Schema.Schema.PruneSnapshotsEntity PruneSnapshots
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(PruneSnapshotsUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Sanoid.Schema.Schema.PruneSnapshotsEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(PruneSnapshotsJsonPropertyName, out JsonAny result))
                {
                    return result.As<Sanoid.Schema.Schema.PruneSnapshotsEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets PlatformUtilities.
    /// </summary>
    public Sanoid.Schema.Schema.PlatformUtilitiesEntity PlatformUtilities
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(PlatformUtilitiesUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Sanoid.Schema.Schema.PlatformUtilitiesEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(PlatformUtilitiesJsonPropertyName, out JsonAny result))
                {
                    return result.As<Sanoid.Schema.Schema.PlatformUtilitiesEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Id.
    /// </summary>
    public Sanoid.Schema.Schema.IdEntity Id
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(IdUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Sanoid.Schema.Schema.IdEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(IdJsonPropertyName, out JsonAny result))
                {
                    return result.As<Sanoid.Schema.Schema.IdEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Comments.
    /// </summary>
    public Corvus.Json.JsonString Comments
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(CommentsUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(CommentsJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets SanoidConfigurationCacheDirectory.
    /// </summary>
    public Sanoid.Schema.Schema.SanoidConfigurationCacheDirectoryEntity SanoidConfigurationCacheDirectory
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(SanoidConfigurationCacheDirectoryUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Sanoid.Schema.Schema.SanoidConfigurationCacheDirectoryEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(SanoidConfigurationCacheDirectoryJsonPropertyName, out JsonAny result))
                {
                    return result.As<Sanoid.Schema.Schema.SanoidConfigurationCacheDirectoryEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets SanoidConfigurationRunDirectory.
    /// </summary>
    public Sanoid.Schema.Schema.SanoidConfigurationRunDirectoryEntity SanoidConfigurationRunDirectory
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(SanoidConfigurationRunDirectoryUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Sanoid.Schema.Schema.SanoidConfigurationRunDirectoryEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(SanoidConfigurationRunDirectoryJsonPropertyName, out JsonAny result))
                {
                    return result.As<Sanoid.Schema.Schema.SanoidConfigurationRunDirectoryEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets ForcePruneSnapshots.
    /// </summary>
    public Sanoid.Schema.Schema.ForcePruneSnapshotsEntity ForcePruneSnapshots
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ForcePruneSnapshotsUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Sanoid.Schema.Schema.ForcePruneSnapshotsEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ForcePruneSnapshotsJsonPropertyName, out JsonAny result))
                {
                    return result.As<Sanoid.Schema.Schema.ForcePruneSnapshotsEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Templates.
    /// </summary>
    public Sanoid.Schema.Schema.TemplatesEntity Templates
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(TemplatesUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Sanoid.Schema.Schema.TemplatesEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(TemplatesJsonPropertyName, out JsonAny result))
                {
                    return result.As<Sanoid.Schema.Schema.TemplatesEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Datasets.
    /// </summary>
    public Sanoid.Schema.Schema.DatasetsEntity Datasets
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(DatasetsUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Sanoid.Schema.Schema.DatasetsEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(DatasetsJsonPropertyName, out JsonAny result))
                {
                    return result.As<Sanoid.Schema.Schema.DatasetsEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Creates an instance of a <see cref = "Schema"/>.
    /// </summary>
    public static Schema Create(Sanoid.Schema.Schema.UseSanoidConfigurationEntity useSanoidConfiguration, Sanoid.Schema.Schema.SanoidConfigurationPathBaseEntity sanoidConfigurationPathBase, Sanoid.Schema.Schema.SanoidConfigurationDefaultsFileEntity sanoidConfigurationDefaultsFile, Sanoid.Schema.Schema.SanoidConfigurationLocalFileEntity sanoidConfigurationLocalFile, Sanoid.Schema.Schema.FormattingEntity formatting, Sanoid.Schema.Schema.MonitoringEntity monitoring, Sanoid.Schema.Schema.TakeSnapshotsEntity takeSnapshots, Sanoid.Schema.Schema.PruneSnapshotsEntity pruneSnapshots, Sanoid.Schema.Schema.PlatformUtilitiesEntity platformUtilities, Sanoid.Schema.Schema.IdEntity? id = null, Corvus.Json.JsonString? comments = null, Sanoid.Schema.Schema.SanoidConfigurationCacheDirectoryEntity? sanoidConfigurationCacheDirectory = null, Sanoid.Schema.Schema.SanoidConfigurationRunDirectoryEntity? sanoidConfigurationRunDirectory = null, Sanoid.Schema.Schema.ForcePruneSnapshotsEntity? forcePruneSnapshots = null, Sanoid.Schema.Schema.TemplatesEntity? templates = null, Sanoid.Schema.Schema.DatasetsEntity? datasets = null)
    {
        var builder = ImmutableDictionary.CreateBuilder<JsonPropertyName, JsonAny>();
        builder.Add(UseSanoidConfigurationJsonPropertyName, useSanoidConfiguration.AsAny);
        builder.Add(SanoidConfigurationPathBaseJsonPropertyName, sanoidConfigurationPathBase.AsAny);
        builder.Add(SanoidConfigurationDefaultsFileJsonPropertyName, sanoidConfigurationDefaultsFile.AsAny);
        builder.Add(SanoidConfigurationLocalFileJsonPropertyName, sanoidConfigurationLocalFile.AsAny);
        builder.Add(FormattingJsonPropertyName, formatting.AsAny);
        builder.Add(MonitoringJsonPropertyName, monitoring.AsAny);
        builder.Add(TakeSnapshotsJsonPropertyName, takeSnapshots.AsAny);
        builder.Add(PruneSnapshotsJsonPropertyName, pruneSnapshots.AsAny);
        builder.Add(PlatformUtilitiesJsonPropertyName, platformUtilities.AsAny);
        if (id is Sanoid.Schema.Schema.IdEntity id__)
        {
            builder.Add(IdJsonPropertyName, id__.AsAny);
        }

        if (comments is Corvus.Json.JsonString comments__)
        {
            builder.Add(CommentsJsonPropertyName, comments__.AsAny);
        }

        if (sanoidConfigurationCacheDirectory is Sanoid.Schema.Schema.SanoidConfigurationCacheDirectoryEntity sanoidConfigurationCacheDirectory__)
        {
            builder.Add(SanoidConfigurationCacheDirectoryJsonPropertyName, sanoidConfigurationCacheDirectory__.AsAny);
        }

        if (sanoidConfigurationRunDirectory is Sanoid.Schema.Schema.SanoidConfigurationRunDirectoryEntity sanoidConfigurationRunDirectory__)
        {
            builder.Add(SanoidConfigurationRunDirectoryJsonPropertyName, sanoidConfigurationRunDirectory__.AsAny);
        }

        if (forcePruneSnapshots is Sanoid.Schema.Schema.ForcePruneSnapshotsEntity forcePruneSnapshots__)
        {
            builder.Add(ForcePruneSnapshotsJsonPropertyName, forcePruneSnapshots__.AsAny);
        }

        if (templates is Sanoid.Schema.Schema.TemplatesEntity templates__)
        {
            builder.Add(TemplatesJsonPropertyName, templates__.AsAny);
        }

        if (datasets is Sanoid.Schema.Schema.DatasetsEntity datasets__)
        {
            builder.Add(DatasetsJsonPropertyName, datasets__.AsAny);
        }

        return builder.ToImmutable();
    }

    /// <summary>
    /// Sets UseSanoidConfiguration.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithUseSanoidConfiguration(in Sanoid.Schema.Schema.UseSanoidConfigurationEntity value)
    {
        return this.SetProperty(UseSanoidConfigurationJsonPropertyName, value);
    }

    /// <summary>
    /// Sets SanoidConfigurationPathBase.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithSanoidConfigurationPathBase(in Sanoid.Schema.Schema.SanoidConfigurationPathBaseEntity value)
    {
        return this.SetProperty(SanoidConfigurationPathBaseJsonPropertyName, value);
    }

    /// <summary>
    /// Sets SanoidConfigurationDefaultsFile.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithSanoidConfigurationDefaultsFile(in Sanoid.Schema.Schema.SanoidConfigurationDefaultsFileEntity value)
    {
        return this.SetProperty(SanoidConfigurationDefaultsFileJsonPropertyName, value);
    }

    /// <summary>
    /// Sets SanoidConfigurationLocalFile.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithSanoidConfigurationLocalFile(in Sanoid.Schema.Schema.SanoidConfigurationLocalFileEntity value)
    {
        return this.SetProperty(SanoidConfigurationLocalFileJsonPropertyName, value);
    }

    /// <summary>
    /// Sets Formatting.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithFormatting(in Sanoid.Schema.Schema.FormattingEntity value)
    {
        return this.SetProperty(FormattingJsonPropertyName, value);
    }

    /// <summary>
    /// Sets Monitoring.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithMonitoring(in Sanoid.Schema.Schema.MonitoringEntity value)
    {
        return this.SetProperty(MonitoringJsonPropertyName, value);
    }

    /// <summary>
    /// Sets TakeSnapshots.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithTakeSnapshots(in Sanoid.Schema.Schema.TakeSnapshotsEntity value)
    {
        return this.SetProperty(TakeSnapshotsJsonPropertyName, value);
    }

    /// <summary>
    /// Sets PruneSnapshots.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithPruneSnapshots(in Sanoid.Schema.Schema.PruneSnapshotsEntity value)
    {
        return this.SetProperty(PruneSnapshotsJsonPropertyName, value);
    }

    /// <summary>
    /// Sets PlatformUtilities.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithPlatformUtilities(in Sanoid.Schema.Schema.PlatformUtilitiesEntity value)
    {
        return this.SetProperty(PlatformUtilitiesJsonPropertyName, value);
    }

    /// <summary>
    /// Sets $id.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithId(in Sanoid.Schema.Schema.IdEntity value)
    {
        return this.SetProperty(IdJsonPropertyName, value);
    }

    /// <summary>
    /// Sets $comments.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithComments(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(CommentsJsonPropertyName, value);
    }

    /// <summary>
    /// Sets SanoidConfigurationCacheDirectory.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithSanoidConfigurationCacheDirectory(in Sanoid.Schema.Schema.SanoidConfigurationCacheDirectoryEntity value)
    {
        return this.SetProperty(SanoidConfigurationCacheDirectoryJsonPropertyName, value);
    }

    /// <summary>
    /// Sets SanoidConfigurationRunDirectory.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithSanoidConfigurationRunDirectory(in Sanoid.Schema.Schema.SanoidConfigurationRunDirectoryEntity value)
    {
        return this.SetProperty(SanoidConfigurationRunDirectoryJsonPropertyName, value);
    }

    /// <summary>
    /// Sets ForcePruneSnapshots.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithForcePruneSnapshots(in Sanoid.Schema.Schema.ForcePruneSnapshotsEntity value)
    {
        return this.SetProperty(ForcePruneSnapshotsJsonPropertyName, value);
    }

    /// <summary>
    /// Sets Templates.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithTemplates(in Sanoid.Schema.Schema.TemplatesEntity value)
    {
        return this.SetProperty(TemplatesJsonPropertyName, value);
    }

    /// <summary>
    /// Sets Datasets.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithDatasets(in Sanoid.Schema.Schema.DatasetsEntity value)
    {
        return this.SetProperty(DatasetsJsonPropertyName, value);
    }

    private static ValidationContext __CorvusValidateUseSanoidConfiguration(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Sanoid.Schema.Schema.UseSanoidConfigurationEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateSanoidConfigurationPathBase(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Sanoid.Schema.Schema.SanoidConfigurationPathBaseEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateSanoidConfigurationDefaultsFile(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Sanoid.Schema.Schema.SanoidConfigurationDefaultsFileEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateSanoidConfigurationLocalFile(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Sanoid.Schema.Schema.SanoidConfigurationLocalFileEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateFormatting(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Sanoid.Schema.Schema.FormattingEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateMonitoring(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Sanoid.Schema.Schema.MonitoringEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateTakeSnapshots(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Sanoid.Schema.Schema.TakeSnapshotsEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidatePruneSnapshots(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Sanoid.Schema.Schema.PruneSnapshotsEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidatePlatformUtilities(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Sanoid.Schema.Schema.PlatformUtilitiesEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateId(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Sanoid.Schema.Schema.IdEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateComments(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateSanoidConfigurationCacheDirectory(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Sanoid.Schema.Schema.SanoidConfigurationCacheDirectoryEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateSanoidConfigurationRunDirectory(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Sanoid.Schema.Schema.SanoidConfigurationRunDirectoryEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateForcePruneSnapshots(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Sanoid.Schema.Schema.ForcePruneSnapshotsEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateTemplates(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Sanoid.Schema.Schema.TemplatesEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateDatasets(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Sanoid.Schema.Schema.DatasetsEntity>().Validate(validationContext, level);
    }

    /// <summary>
    /// Tries to get the validator for the given property.
    /// </summary>
    /// <param name = "property">The property for which to get the validator.</param>
    /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
    /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
    /// <returns><c>True</c> if the validator was found.</returns>
    private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
    {
        if (hasJsonElementBacking)
        {
            if (property.NameEquals(UseSanoidConfigurationUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateUseSanoidConfiguration;
                return true;
            }
            else if (property.NameEquals(SanoidConfigurationPathBaseUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateSanoidConfigurationPathBase;
                return true;
            }
            else if (property.NameEquals(SanoidConfigurationDefaultsFileUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateSanoidConfigurationDefaultsFile;
                return true;
            }
            else if (property.NameEquals(SanoidConfigurationLocalFileUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateSanoidConfigurationLocalFile;
                return true;
            }
            else if (property.NameEquals(FormattingUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateFormatting;
                return true;
            }
            else if (property.NameEquals(MonitoringUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateMonitoring;
                return true;
            }
            else if (property.NameEquals(TakeSnapshotsUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateTakeSnapshots;
                return true;
            }
            else if (property.NameEquals(PruneSnapshotsUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidatePruneSnapshots;
                return true;
            }
            else if (property.NameEquals(PlatformUtilitiesUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidatePlatformUtilities;
                return true;
            }
            else if (property.NameEquals(IdUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateId;
                return true;
            }
            else if (property.NameEquals(CommentsUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateComments;
                return true;
            }
            else if (property.NameEquals(SanoidConfigurationCacheDirectoryUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateSanoidConfigurationCacheDirectory;
                return true;
            }
            else if (property.NameEquals(SanoidConfigurationRunDirectoryUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateSanoidConfigurationRunDirectory;
                return true;
            }
            else if (property.NameEquals(ForcePruneSnapshotsUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateForcePruneSnapshots;
                return true;
            }
            else if (property.NameEquals(TemplatesUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateTemplates;
                return true;
            }
            else if (property.NameEquals(DatasetsUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateDatasets;
                return true;
            }
        }
        else
        {
            if (property.NameEquals(UseSanoidConfigurationJsonPropertyName))
            {
                propertyValidator = __CorvusValidateUseSanoidConfiguration;
                return true;
            }
            else if (property.NameEquals(SanoidConfigurationPathBaseJsonPropertyName))
            {
                propertyValidator = __CorvusValidateSanoidConfigurationPathBase;
                return true;
            }
            else if (property.NameEquals(SanoidConfigurationDefaultsFileJsonPropertyName))
            {
                propertyValidator = __CorvusValidateSanoidConfigurationDefaultsFile;
                return true;
            }
            else if (property.NameEquals(SanoidConfigurationLocalFileJsonPropertyName))
            {
                propertyValidator = __CorvusValidateSanoidConfigurationLocalFile;
                return true;
            }
            else if (property.NameEquals(FormattingJsonPropertyName))
            {
                propertyValidator = __CorvusValidateFormatting;
                return true;
            }
            else if (property.NameEquals(MonitoringJsonPropertyName))
            {
                propertyValidator = __CorvusValidateMonitoring;
                return true;
            }
            else if (property.NameEquals(TakeSnapshotsJsonPropertyName))
            {
                propertyValidator = __CorvusValidateTakeSnapshots;
                return true;
            }
            else if (property.NameEquals(PruneSnapshotsJsonPropertyName))
            {
                propertyValidator = __CorvusValidatePruneSnapshots;
                return true;
            }
            else if (property.NameEquals(PlatformUtilitiesJsonPropertyName))
            {
                propertyValidator = __CorvusValidatePlatformUtilities;
                return true;
            }
            else if (property.NameEquals(IdJsonPropertyName))
            {
                propertyValidator = __CorvusValidateId;
                return true;
            }
            else if (property.NameEquals(CommentsJsonPropertyName))
            {
                propertyValidator = __CorvusValidateComments;
                return true;
            }
            else if (property.NameEquals(SanoidConfigurationCacheDirectoryJsonPropertyName))
            {
                propertyValidator = __CorvusValidateSanoidConfigurationCacheDirectory;
                return true;
            }
            else if (property.NameEquals(SanoidConfigurationRunDirectoryJsonPropertyName))
            {
                propertyValidator = __CorvusValidateSanoidConfigurationRunDirectory;
                return true;
            }
            else if (property.NameEquals(ForcePruneSnapshotsJsonPropertyName))
            {
                propertyValidator = __CorvusValidateForcePruneSnapshots;
                return true;
            }
            else if (property.NameEquals(TemplatesJsonPropertyName))
            {
                propertyValidator = __CorvusValidateTemplates;
                return true;
            }
            else if (property.NameEquals(DatasetsJsonPropertyName))
            {
                propertyValidator = __CorvusValidateDatasets;
                return true;
            }
        }

        propertyValidator = null;
        return false;
    }
}