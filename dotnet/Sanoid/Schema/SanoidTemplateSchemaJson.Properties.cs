//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Sanoid.Schema;
/// <summary>
/// A type generated from a JsonSchema specification.
/// </summary>
public readonly partial struct SanoidTemplateSchemaJson
{
    /// <summary>
    /// JSON property name for <see cref = "Comments"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> CommentsUtf8JsonPropertyName = new byte[]{36, 99, 111, 109, 109, 101, 110, 116, 115};
    /// <summary>
    /// JSON property name for <see cref = "Comments"/>.
    /// </summary>
    public const string CommentsJsonPropertyName = "$comments";
    /// <summary>
    /// JSON property name for <see cref = "AutoSnapshot"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> AutoSnapshotUtf8JsonPropertyName = new byte[]{65, 117, 116, 111, 83, 110, 97, 112, 115, 104, 111, 116};
    /// <summary>
    /// JSON property name for <see cref = "AutoSnapshot"/>.
    /// </summary>
    public const string AutoSnapshotJsonPropertyName = "AutoSnapshot";
    /// <summary>
    /// JSON property name for <see cref = "AutoPrune"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> AutoPruneUtf8JsonPropertyName = new byte[]{65, 117, 116, 111, 80, 114, 117, 110, 101};
    /// <summary>
    /// JSON property name for <see cref = "AutoPrune"/>.
    /// </summary>
    public const string AutoPruneJsonPropertyName = "AutoPrune";
    /// <summary>
    /// JSON property name for <see cref = "Recursive"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> RecursiveUtf8JsonPropertyName = new byte[]{82, 101, 99, 117, 114, 115, 105, 118, 101};
    /// <summary>
    /// JSON property name for <see cref = "Recursive"/>.
    /// </summary>
    public const string RecursiveJsonPropertyName = "Recursive";
    /// <summary>
    /// JSON property name for <see cref = "UseTemplate"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> UseTemplateUtf8JsonPropertyName = new byte[]{85, 115, 101, 84, 101, 109, 112, 108, 97, 116, 101};
    /// <summary>
    /// JSON property name for <see cref = "UseTemplate"/>.
    /// </summary>
    public const string UseTemplateJsonPropertyName = "UseTemplate";
    /// <summary>
    /// JSON property name for <see cref = "SkipChildren"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> SkipChildrenUtf8JsonPropertyName = new byte[]{83, 107, 105, 112, 67, 104, 105, 108, 100, 114, 101, 110};
    /// <summary>
    /// JSON property name for <see cref = "SkipChildren"/>.
    /// </summary>
    public const string SkipChildrenJsonPropertyName = "SkipChildren";
    /// <summary>
    /// JSON property name for <see cref = "FrequentPeriod"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> FrequentPeriodUtf8JsonPropertyName = new byte[]{70, 114, 101, 113, 117, 101, 110, 116, 80, 101, 114, 105, 111, 100};
    /// <summary>
    /// JSON property name for <see cref = "FrequentPeriod"/>.
    /// </summary>
    public const string FrequentPeriodJsonPropertyName = "FrequentPeriod";
    /// <summary>
    /// JSON property name for <see cref = "SnapshotRetention"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> SnapshotRetentionUtf8JsonPropertyName = new byte[]{83, 110, 97, 112, 115, 104, 111, 116, 82, 101, 116, 101, 110, 116, 105, 111, 110};
    /// <summary>
    /// JSON property name for <see cref = "SnapshotRetention"/>.
    /// </summary>
    public const string SnapshotRetentionJsonPropertyName = "SnapshotRetention";
    /// <summary>
    /// JSON property name for <see cref = "SnapshotTiming"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> SnapshotTimingUtf8JsonPropertyName = new byte[]{83, 110, 97, 112, 115, 104, 111, 116, 84, 105, 109, 105, 110, 103};
    /// <summary>
    /// JSON property name for <see cref = "SnapshotTiming"/>.
    /// </summary>
    public const string SnapshotTimingJsonPropertyName = "SnapshotTiming";
    /// <summary>
    /// Gets Comments.
    /// </summary>
    public Corvus.Json.JsonString Comments
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(CommentsUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(CommentsJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets AutoSnapshot.
    /// </summary>
    public Sanoid.Schema.SanoidTemplateSchemaJson.AutoSnapshotEntity AutoSnapshot
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(AutoSnapshotUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Sanoid.Schema.SanoidTemplateSchemaJson.AutoSnapshotEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(AutoSnapshotJsonPropertyName, out JsonAny result))
                {
                    return result.As<Sanoid.Schema.SanoidTemplateSchemaJson.AutoSnapshotEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets AutoPrune.
    /// </summary>
    public Sanoid.Schema.SanoidTemplateSchemaJson.AutoPruneEntity AutoPrune
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(AutoPruneUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Sanoid.Schema.SanoidTemplateSchemaJson.AutoPruneEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(AutoPruneJsonPropertyName, out JsonAny result))
                {
                    return result.As<Sanoid.Schema.SanoidTemplateSchemaJson.AutoPruneEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Recursive.
    /// </summary>
    public Sanoid.Schema.SanoidTemplateSchemaJson.RecursiveEntity Recursive
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(RecursiveUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Sanoid.Schema.SanoidTemplateSchemaJson.RecursiveEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(RecursiveJsonPropertyName, out JsonAny result))
                {
                    return result.As<Sanoid.Schema.SanoidTemplateSchemaJson.RecursiveEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets UseTemplate.
    /// </summary>
    public Sanoid.Schema.SanoidTemplateSchemaJson.UseTemplateEntity UseTemplate
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(UseTemplateUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Sanoid.Schema.SanoidTemplateSchemaJson.UseTemplateEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(UseTemplateJsonPropertyName, out JsonAny result))
                {
                    return result.As<Sanoid.Schema.SanoidTemplateSchemaJson.UseTemplateEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets SkipChildren.
    /// </summary>
    public Sanoid.Schema.SanoidTemplateSchemaJson.SkipChildrenEntity SkipChildren
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(SkipChildrenUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Sanoid.Schema.SanoidTemplateSchemaJson.SkipChildrenEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(SkipChildrenJsonPropertyName, out JsonAny result))
                {
                    return result.As<Sanoid.Schema.SanoidTemplateSchemaJson.SkipChildrenEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets FrequentPeriod.
    /// </summary>
    public Sanoid.Schema.SanoidTemplateSchemaJson.FrequentPeriodEntity FrequentPeriod
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(FrequentPeriodUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Sanoid.Schema.SanoidTemplateSchemaJson.FrequentPeriodEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(FrequentPeriodJsonPropertyName, out JsonAny result))
                {
                    return result.As<Sanoid.Schema.SanoidTemplateSchemaJson.FrequentPeriodEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets SnapshotRetention.
    /// </summary>
    public Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity SnapshotRetention
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(SnapshotRetentionUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(SnapshotRetentionJsonPropertyName, out JsonAny result))
                {
                    return result.As<Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets SnapshotTiming.
    /// </summary>
    public Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotTimingEntity SnapshotTiming
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(SnapshotTimingUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotTimingEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(SnapshotTimingJsonPropertyName, out JsonAny result))
                {
                    return result.As<Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotTimingEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Creates an instance of a <see cref = "SanoidTemplateSchemaJson"/>.
    /// </summary>
    public static SanoidTemplateSchemaJson Create(Corvus.Json.JsonString? comments = null, Sanoid.Schema.SanoidTemplateSchemaJson.AutoSnapshotEntity? autoSnapshot = null, Sanoid.Schema.SanoidTemplateSchemaJson.AutoPruneEntity? autoPrune = null, Sanoid.Schema.SanoidTemplateSchemaJson.RecursiveEntity? recursive = null, Sanoid.Schema.SanoidTemplateSchemaJson.UseTemplateEntity? useTemplate = null, Sanoid.Schema.SanoidTemplateSchemaJson.SkipChildrenEntity? skipChildren = null, Sanoid.Schema.SanoidTemplateSchemaJson.FrequentPeriodEntity? frequentPeriod = null, Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity? snapshotRetention = null, Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotTimingEntity? snapshotTiming = null)
    {
        var builder = ImmutableDictionary.CreateBuilder<JsonPropertyName, JsonAny>();
        if (comments is Corvus.Json.JsonString comments__)
        {
            builder.Add(CommentsJsonPropertyName, comments__.AsAny);
        }

        if (autoSnapshot is Sanoid.Schema.SanoidTemplateSchemaJson.AutoSnapshotEntity autoSnapshot__)
        {
            builder.Add(AutoSnapshotJsonPropertyName, autoSnapshot__.AsAny);
        }

        if (autoPrune is Sanoid.Schema.SanoidTemplateSchemaJson.AutoPruneEntity autoPrune__)
        {
            builder.Add(AutoPruneJsonPropertyName, autoPrune__.AsAny);
        }

        if (recursive is Sanoid.Schema.SanoidTemplateSchemaJson.RecursiveEntity recursive__)
        {
            builder.Add(RecursiveJsonPropertyName, recursive__.AsAny);
        }

        if (useTemplate is Sanoid.Schema.SanoidTemplateSchemaJson.UseTemplateEntity useTemplate__)
        {
            builder.Add(UseTemplateJsonPropertyName, useTemplate__.AsAny);
        }

        if (skipChildren is Sanoid.Schema.SanoidTemplateSchemaJson.SkipChildrenEntity skipChildren__)
        {
            builder.Add(SkipChildrenJsonPropertyName, skipChildren__.AsAny);
        }

        if (frequentPeriod is Sanoid.Schema.SanoidTemplateSchemaJson.FrequentPeriodEntity frequentPeriod__)
        {
            builder.Add(FrequentPeriodJsonPropertyName, frequentPeriod__.AsAny);
        }

        if (snapshotRetention is Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity snapshotRetention__)
        {
            builder.Add(SnapshotRetentionJsonPropertyName, snapshotRetention__.AsAny);
        }

        if (snapshotTiming is Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotTimingEntity snapshotTiming__)
        {
            builder.Add(SnapshotTimingJsonPropertyName, snapshotTiming__.AsAny);
        }

        return builder.ToImmutable();
    }

    /// <summary>
    /// Sets $comments.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public SanoidTemplateSchemaJson WithComments(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(CommentsJsonPropertyName, value);
    }

    /// <summary>
    /// Sets AutoSnapshot.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public SanoidTemplateSchemaJson WithAutoSnapshot(in Sanoid.Schema.SanoidTemplateSchemaJson.AutoSnapshotEntity value)
    {
        return this.SetProperty(AutoSnapshotJsonPropertyName, value);
    }

    /// <summary>
    /// Sets AutoPrune.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public SanoidTemplateSchemaJson WithAutoPrune(in Sanoid.Schema.SanoidTemplateSchemaJson.AutoPruneEntity value)
    {
        return this.SetProperty(AutoPruneJsonPropertyName, value);
    }

    /// <summary>
    /// Sets Recursive.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public SanoidTemplateSchemaJson WithRecursive(in Sanoid.Schema.SanoidTemplateSchemaJson.RecursiveEntity value)
    {
        return this.SetProperty(RecursiveJsonPropertyName, value);
    }

    /// <summary>
    /// Sets UseTemplate.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public SanoidTemplateSchemaJson WithUseTemplate(in Sanoid.Schema.SanoidTemplateSchemaJson.UseTemplateEntity value)
    {
        return this.SetProperty(UseTemplateJsonPropertyName, value);
    }

    /// <summary>
    /// Sets SkipChildren.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public SanoidTemplateSchemaJson WithSkipChildren(in Sanoid.Schema.SanoidTemplateSchemaJson.SkipChildrenEntity value)
    {
        return this.SetProperty(SkipChildrenJsonPropertyName, value);
    }

    /// <summary>
    /// Sets FrequentPeriod.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public SanoidTemplateSchemaJson WithFrequentPeriod(in Sanoid.Schema.SanoidTemplateSchemaJson.FrequentPeriodEntity value)
    {
        return this.SetProperty(FrequentPeriodJsonPropertyName, value);
    }

    /// <summary>
    /// Sets SnapshotRetention.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public SanoidTemplateSchemaJson WithSnapshotRetention(in Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity value)
    {
        return this.SetProperty(SnapshotRetentionJsonPropertyName, value);
    }

    /// <summary>
    /// Sets SnapshotTiming.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public SanoidTemplateSchemaJson WithSnapshotTiming(in Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotTimingEntity value)
    {
        return this.SetProperty(SnapshotTimingJsonPropertyName, value);
    }

    private static ValidationContext __CorvusValidateComments(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateAutoSnapshot(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Sanoid.Schema.SanoidTemplateSchemaJson.AutoSnapshotEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateAutoPrune(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Sanoid.Schema.SanoidTemplateSchemaJson.AutoPruneEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateRecursive(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Sanoid.Schema.SanoidTemplateSchemaJson.RecursiveEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateUseTemplate(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Sanoid.Schema.SanoidTemplateSchemaJson.UseTemplateEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateSkipChildren(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Sanoid.Schema.SanoidTemplateSchemaJson.SkipChildrenEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateFrequentPeriod(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Sanoid.Schema.SanoidTemplateSchemaJson.FrequentPeriodEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateSnapshotRetention(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotRetentionEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateSnapshotTiming(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Sanoid.Schema.SanoidTemplateSchemaJson.SnapshotTimingEntity>().Validate(validationContext, level);
    }

    /// <summary>
    /// Tries to get the validator for the given property.
    /// </summary>
    /// <param name = "property">The property for which to get the validator.</param>
    /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
    /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
    /// <returns><c>True</c> if the validator was found.</returns>
    private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
    {
        if (hasJsonElementBacking)
        {
            if (property.NameEquals(CommentsUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateComments;
                return true;
            }
            else if (property.NameEquals(AutoSnapshotUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateAutoSnapshot;
                return true;
            }
            else if (property.NameEquals(AutoPruneUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateAutoPrune;
                return true;
            }
            else if (property.NameEquals(RecursiveUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateRecursive;
                return true;
            }
            else if (property.NameEquals(UseTemplateUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateUseTemplate;
                return true;
            }
            else if (property.NameEquals(SkipChildrenUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateSkipChildren;
                return true;
            }
            else if (property.NameEquals(FrequentPeriodUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateFrequentPeriod;
                return true;
            }
            else if (property.NameEquals(SnapshotRetentionUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateSnapshotRetention;
                return true;
            }
            else if (property.NameEquals(SnapshotTimingUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateSnapshotTiming;
                return true;
            }
        }
        else
        {
            if (property.NameEquals(CommentsJsonPropertyName))
            {
                propertyValidator = __CorvusValidateComments;
                return true;
            }
            else if (property.NameEquals(AutoSnapshotJsonPropertyName))
            {
                propertyValidator = __CorvusValidateAutoSnapshot;
                return true;
            }
            else if (property.NameEquals(AutoPruneJsonPropertyName))
            {
                propertyValidator = __CorvusValidateAutoPrune;
                return true;
            }
            else if (property.NameEquals(RecursiveJsonPropertyName))
            {
                propertyValidator = __CorvusValidateRecursive;
                return true;
            }
            else if (property.NameEquals(UseTemplateJsonPropertyName))
            {
                propertyValidator = __CorvusValidateUseTemplate;
                return true;
            }
            else if (property.NameEquals(SkipChildrenJsonPropertyName))
            {
                propertyValidator = __CorvusValidateSkipChildren;
                return true;
            }
            else if (property.NameEquals(FrequentPeriodJsonPropertyName))
            {
                propertyValidator = __CorvusValidateFrequentPeriod;
                return true;
            }
            else if (property.NameEquals(SnapshotRetentionJsonPropertyName))
            {
                propertyValidator = __CorvusValidateSnapshotRetention;
                return true;
            }
            else if (property.NameEquals(SnapshotTimingJsonPropertyName))
            {
                propertyValidator = __CorvusValidateSnapshotTiming;
                return true;
            }
        }

        propertyValidator = null;
        return false;
    }
}