// LICENSE:
// 
// This software is licensed for use under the Free Software Foundation's GPL v3.0 license, as retrieved
// from http://www.gnu.org/licenses/gpl-3.0.html on 2014-11-17.  A copy should also be available in this
// project's Git repository at https://github.com/jimsalterjrs/sanoid/blob/master/LICENSE.

//  <auto-generated>
//      This code was generated by:
//        TerminalGuiDesigner v1.0.24.0
//      You can make changes to this file and they will not be overwritten when saving.
//  </auto-generated>
// -----------------------------------------------------------------------------

#nullable enable

using System.Collections.Concurrent;
using System.Runtime.CompilerServices;
using NStack;
using Sanoid.Interop.Zfs.ZfsTypes;
using Terminal.Gui.Trees;

namespace Sanoid.ConfigConsole
{
    using Terminal.Gui;

    public partial class ZfsConfigurationWindow
    {
        public ZfsConfigurationWindow( )
        {
            Initialized += ZfsConfigurationWindowOnInitialized;
            InitializeComponent( );
            SetReadOnlyStates( );
        }

        private readonly ConcurrentDictionary<string, IZfsProperty> _modifiedPropertiesSinceLastSaveForCurrentItem = new( );
        private readonly ConcurrentDictionary<string, SanoidZfsDataset> _treeDatasets = new( );
        private bool _eventsEnabled;
        private ZfsObjectConfigurationTreeNode SelectedTreeNode => (ZfsObjectConfigurationTreeNode)zfsTreeView.SelectedObject;

        [NotNull]
        private static readonly Logger Logger = LogManager.GetCurrentClassLogger( );

        private async void ZfsConfigurationWindowOnInitialized( object? sender, EventArgs e )
        {
            ConfiguredTaskAwaitable zfsRefreshTask = RefreshZfsTreeViewFromZfsAsync( ).ConfigureAwait( true );
            ConfiguredTaskAwaitable setListSourceTask = templateListView.SetSourceAsync( ConfigConsole.TemplateListItems ).ConfigureAwait( true );
            SetCanFocusStates( );
            SetTagsForPropertyFields( );
            SetTabStops( );
            await setListSourceTask;
            await zfsRefreshTask;
            UpdateButtonState( );
        }

        private void UpdateButtonState( )
        {
            if ( zfsTreeView.Objects.Any( ) && zfsTreeView.SelectedObject is ZfsObjectConfigurationTreeNode node )
            {
                resetCurrentButton.Enabled = saveCurrentButton.Enabled = node.BaseDataset != node.TreeDataset;
            }
            else
            {
                resetCurrentButton.Enabled = false;
                saveCurrentButton.Enabled = false;
            }
        }

        private void SetTagsForPropertyFields( )
        {
            enabledRadioGroup.Data = new RadioGroupWithSourceViewData( ZfsPropertyNames.EnabledPropertyName, enabledRadioGroup, enabledSourceTextField );
            takeSnapshotsRadioGroup.Data = new RadioGroupWithSourceViewData( ZfsPropertyNames.TakeSnapshotsPropertyName, takeSnapshotsRadioGroup, takeSnapshotsSourceTextField );
            pruneSnapshotsRadioGroup.Data = new RadioGroupWithSourceViewData( ZfsPropertyNames.PruneSnapshotsPropertyName, pruneSnapshotsRadioGroup, pruneSnapshotsSourceTextField );
            recursionRadioGroup.Data = new RadioGroupWithSourceViewData( ZfsPropertyNames.RecursionPropertyName, recursionRadioGroup, recursionSourceTextField );
            templateListView.Data = new ListViewWithSourceViewData( ZfsPropertyNames.TemplatePropertyName, templateListView, templateSourceTextField );
            retentionFrequentTextField.Data = new RetentionTextValidateFieldViewData( ZfsPropertyNames.SnapshotRetentionFrequentPropertyName, retentionFrequentTextField, 0, int.MaxValue );
            retentionHourlyTextField.Data = new RetentionTextValidateFieldViewData( ZfsPropertyNames.SnapshotRetentionHourlyPropertyName, retentionHourlyTextField, 0, int.MaxValue );
            retentionDailyTextField.Data = new RetentionTextValidateFieldViewData( ZfsPropertyNames.SnapshotRetentionDailyPropertyName, retentionDailyTextField, 0, int.MaxValue );
            retentionWeeklyTextField.Data = new RetentionTextValidateFieldViewData( ZfsPropertyNames.SnapshotRetentionWeeklyPropertyName, retentionWeeklyTextField, 0, int.MaxValue );
            retentionMonthlyTextField.Data = new RetentionTextValidateFieldViewData( ZfsPropertyNames.SnapshotRetentionMonthlyPropertyName, retentionMonthlyTextField, 0, int.MaxValue );
            retentionYearlyTextField.Data = new RetentionTextValidateFieldViewData( ZfsPropertyNames.SnapshotRetentionYearlyPropertyName, retentionYearlyTextField, 0, int.MaxValue );
            retentionPruneDeferralTextField.Data = new RetentionTextValidateFieldViewData( ZfsPropertyNames.SnapshotRetentionPruneDeferralPropertyName, retentionPruneDeferralTextField, 0, 100 );
        }

        private void SetTabStops( )
        {
            SetTabStopsForTreeFrame( 0 );
            SetTabStopsForGeneralPropertiesFrame( 1 );
            SetPropertiesForRetentionPropertiesFrame( 2 );
            SetTabStopsForSnapshotPropertiesFrame( 3 );
            SetTabStopsForActionsFrame( 4 );

            void SetTabStopsForGeneralPropertiesFrame( int generalFrameIndex )
            {
                generalFrame.TabStop = true;
                generalFrame.TabIndex = generalFrameIndex;

                nameLabel.TabStop = false;
                nameTextField.TabStop = false;
                typeLabel.TabStop = false;
                typeTextField.TabStop = false;
                enabledLabel.TabStop = false;
                enabledRadioGroup.TabStop = true;
                enabledRadioGroup.TabIndex = 0;
                enabledSourceLabel.TabStop = false;
                enabledSourceTextField.TabStop = false;
                takeSnapshotsLabel.TabStop = false;
                takeSnapshotsRadioGroup.TabStop = true;
                takeSnapshotsRadioGroup.TabIndex = 1;
                takeSnapshotsSourceLabel.TabStop = false;
                takeSnapshotsSourceTextField.TabStop = false;
                pruneSnapshotsLabel.TabStop = false;
                pruneSnapshotsRadioGroup.TabStop = true;
                pruneSnapshotsRadioGroup.TabIndex = 2;
                pruneSnapshotsSourceLabel.TabStop = false;
                pruneSnapshotsSourceTextField.TabStop = false;
                recursionLabel.TabStop = false;
                recursionRadioGroup.TabStop = true;
                recursionRadioGroup.TabIndex = 3;
                recursionSourceLabel.TabStop = false;
                recursionSourceTextField.TabStop = false;
                templateLabel.TabStop = false;
                templateListView.TabStop = true;
                templateListView.TabIndex = 4;
                templateSourceLabel.TabStop = false;
                templateSourceTextField.TabStop = false;
            }
            void SetPropertiesForRetentionPropertiesFrame( int retentionFrameIndex )
            {
                retentionFrame.TabStop = true;
                retentionFrame.TabIndex = retentionFrameIndex;

                recentFrame.TabStop = false;
                retentionFrequentLabel.TabStop = false;
                retentionFrequentTextField.TabStop = true;
                retentionFrequentTextField.TabIndex = 0;
                retentionHourlyLabel.TabStop = false;
                retentionHourlyTextField.TabStop = true;
                retentionHourlyTextField.TabIndex = 1;
                retentionDailyLabel.TabStop = false;
                retentionDailyTextField.TabStop = true;
                retentionDailyTextField.TabIndex = 2;
                retentionWeeklyLabel.TabStop = false;
                retentionWeeklyTextField.TabStop = true;
                retentionWeeklyTextField.TabIndex = 3;
                retentionMonthlyLabel.TabStop = false;
                retentionMonthlyTextField.TabStop = true;
                retentionMonthlyTextField.TabIndex = 4;
                retentionYearlyLabel.TabStop = false;
                retentionYearlyTextField.TabStop = true;
                retentionYearlyTextField.TabIndex = 5;
            }
            void SetTabStopsForSnapshotPropertiesFrame( int snapshotFrameIndex )
            {
                snapshotPropertiesFrame.TabStop = true;
                snapshotPropertiesFrame.TabIndex = snapshotFrameIndex;
            }
            void SetTabStopsForTreeFrame( int treeFrameIndex )
            {
                zfsConfigurationTreeFrame.TabStop = true;
                zfsConfigurationTreeFrame.TabIndex = treeFrameIndex;
                zfsTreeView.TabStop = true;
                zfsTreeView.TabIndex = 0;
            }
            void SetTabStopsForActionsFrame( int actionsFrameIndex )
            {
                zfsConfigurationActionsFrame.TabStop = true;
                zfsConfigurationActionsFrame.TabIndex = actionsFrameIndex;
            }
        }

        private void SetCanFocusStates( )
        {
            zfsTreeView.Enabled = true;
            zfsTreeView.CanFocus = true;
            enabledRadioGroup.Enabled = true;
            enabledRadioGroup.CanFocus = true;
            takeSnapshotsRadioGroup.Enabled = true;
            takeSnapshotsRadioGroup.CanFocus = true;
            pruneSnapshotsRadioGroup.Enabled = true;
            pruneSnapshotsRadioGroup.CanFocus = true;
            retentionFrequentTextField.Enabled = true;
            retentionFrequentTextField.CanFocus = true;
            retentionHourlyTextField.Enabled = true;
            retentionHourlyTextField.CanFocus = true;
            retentionDailyTextField.Enabled = true;
            retentionDailyTextField.CanFocus = true;
            retentionWeeklyTextField.Enabled = true;
            retentionWeeklyTextField.CanFocus = true;
            retentionMonthlyTextField.Enabled = true;
            retentionMonthlyTextField.CanFocus = true;
            retentionYearlyTextField.Enabled = true;
            retentionYearlyTextField.CanFocus = true;
        }

        private void SetReadOnlyStates( )
        {
            nameTextField.ReadOnly = true;
            typeTextField.ReadOnly = true;
            enabledSourceTextField.ReadOnly = true;
            takeSnapshotsSourceTextField.ReadOnly = true;
            pruneSnapshotsSourceTextField.ReadOnly = true;
            templateSourceTextField.ReadOnly = true;
            recursionSourceTextField.ReadOnly = true;
            recentFrequentTextField.ReadOnly = true;
            recentHourlyTextField.ReadOnly = true;
            recentDailyTextField.ReadOnly = true;
            recentWeeklyTextField.ReadOnly = true;
            recentMonthlyTextField.ReadOnly = true;
            recentYearlyTextField.ReadOnly = true;
        }

        private void TemplateListViewOnSelectedItemChanged( ListViewItemEventArgs args )
        {
            ArgumentNullException.ThrowIfNull( args, nameof( args ) );

            ListViewWithSourceViewData viewData = (ListViewWithSourceViewData)templateListView.Data;

            ZfsProperty<string> newProperty = (ZfsProperty<string>)SelectedTreeNode.TreeDataset.UpdateProperty( viewData.PropertyName, ConfigConsole.TemplateListItems[ args.Item ].TemplateName, "local" );
            _modifiedPropertiesSinceLastSaveForCurrentItem[ viewData.PropertyName ] = newProperty;
            viewData.SourceTextField.Text = "local";
            UpdateFieldsForSelectedTreeNode( );
            UpdateButtonState( );
        }

        private void RecursionRadioGroupSelectedItemChanged( SelectedItemChangedArgs args )
        {
            UpdateSelectedItemStringRadioGroupProperty( recursionRadioGroup, "local" );
            UpdateFieldsForSelectedTreeNode( );
            UpdateButtonState( );
        }

        private void RetentionTextFieldOnLeave( FocusEventArgs args )
        {
            ArgumentNullException.ThrowIfNull( args, nameof( args ) );

            UpdateSelectedItemTextValidateFieldIntProperty( (RetentionTextValidateFieldViewData)args.View.Data, "local" );
            UpdateFieldsForSelectedTreeNode( );
            UpdateButtonState( );
        }

        private void ResetCurrentButtonOnClicked( )
        {
            DisableEventHandlers( );
            ClearAllPropertyFields( );
            _modifiedPropertiesSinceLastSaveForCurrentItem.Clear( );
            RestorePreviousSelectedItem( );
            UpdateFieldsForSelectedTreeNode( false );
            UpdateButtonState( );
            EnableEventHandlers( );
        }

        private void SaveCurrentButtonOnClicked( )
        {
            try
            {
                DisableEventHandlers( );

                if ( !SelectedTreeNode.IsModified )
                {
                    return;
                }

                // The buttons are disposable, but the Dialog will dispose them when it is closed
                Button cancelButton = new( "Cancel", true );
                Button saveButton = new( "Save" );
                using Dialog saveZfsObjectDialog = new( "Confirm Saving ZFS Object Configuration", 80, 7, cancelButton, saveButton );
                bool saveConfirmed = false;
                string zfsObjectPath = SelectedTreeNode.Text;

                cancelButton.Clicked += OnCancelButtonOnClicked;
                saveButton.Clicked += OnSaveButtonOnClicked;

                saveZfsObjectDialog.ButtonAlignment = Dialog.ButtonAlignments.Center;
                saveZfsObjectDialog.AutoSize = true;
                saveZfsObjectDialog.ColorScheme = whiteOnRed;
                saveZfsObjectDialog.TextAlignment = TextAlignment.Centered;
                saveZfsObjectDialog.VerticalTextAlignment = VerticalTextAlignment.Middle;
                saveZfsObjectDialog.Text = $"The following command will be executed:\nzfs set {_modifiedPropertiesSinceLastSaveForCurrentItem.ToStringForZfsSet( )} {zfsObjectPath}\n\nTHIS OPERATION CANNOT BE UNDONE";
                saveZfsObjectDialog.Modal = true;

                Application.Run( saveZfsObjectDialog );

                if ( saveConfirmed && ConfigConsole.CommandRunner is not null )
                {
                    Logger.Info( "Saving {0}", zfsObjectPath );
                    if ( ZfsTasks.SetPropertiesForDataset( Program.Settings!.DryRun, zfsObjectPath, _modifiedPropertiesSinceLastSaveForCurrentItem.Values.ToList( ), ConfigConsole.CommandRunner ) || Program.Settings!.DryRun )
                    {
                        Logger.Debug( "Applying inheritable properties to children of {0} in tree", zfsObjectPath );
                        foreach ( KeyValuePair<string, IZfsProperty> kvp in _modifiedPropertiesSinceLastSaveForCurrentItem )
                        {
                            switch ( kvp.Value )
                            {
                                case ZfsProperty<bool> boolProp:
                                    UpdateDescendentsBooleanPropertyInheritance( SelectedTreeNode, boolProp, $"inherited from {SelectedTreeNode.Text}" );
                                    break;
                                case ZfsProperty<int> intProp:
                                    UpdateDescendentsIntPropertyInheritance( SelectedTreeNode, intProp, $"inherited from {SelectedTreeNode.Text}" );
                                    break;
                                case ZfsProperty<string> stringProp:
                                    UpdateDescendentsStringPropertyInheritance( SelectedTreeNode, stringProp, $"inherited from {SelectedTreeNode.Text}" );
                                    break;
                                case ZfsProperty<DateTimeOffset> dtoProp:
                                    UpdateDescendentsDateTimeOffsetPropertyInheritance( SelectedTreeNode, dtoProp, $"inherited from {SelectedTreeNode.Text}" );
                                    break;
                            }
                        }

                        _modifiedPropertiesSinceLastSaveForCurrentItem.Clear( );
                        SelectedTreeNode.BaseDataset = SelectedTreeNode.TreeDataset with { };
                    }
                }

                // Fine to ignore this warning here, because we are explicitly un-wiring the events before any disposal will occur.
                // The button click handlers are un-subscribed and THEN the dialog is asked to exit.
                // ReSharper disable AccessToDisposedClosure
                void OnCancelButtonOnClicked( )
                {
                    cancelButton.Clicked -= OnCancelButtonOnClicked;
                    saveButton.Clicked -= OnSaveButtonOnClicked;
                    RequestStop( saveZfsObjectDialog );
                }

                void OnSaveButtonOnClicked( )
                {
                    saveConfirmed = true;
                    cancelButton.Clicked -= OnCancelButtonOnClicked;
                    saveButton.Clicked -= OnSaveButtonOnClicked;
                    RequestStop( saveZfsObjectDialog );
                }
                // ReSharper restore AccessToDisposedClosure
            }
            finally
            {
                UpdateFieldsForSelectedTreeNode( false );
                UpdateButtonState( );
                EnableEventHandlers( );
            }
        }

        private void BooleanRadioGroupOnMouseClick( MouseEventArgs args )
        {
            RadioGroupWithSourceViewData viewData = (RadioGroupWithSourceViewData)args.MouseEvent.View.Data;
            ZfsProperty<bool> newProperty = SelectedTreeNode.TreeDataset.UpdateProperty( viewData.PropertyName, viewData.RadioGroup.GetSelectedBooleanFromLabel( ), "local" );
            _modifiedPropertiesSinceLastSaveForCurrentItem[ viewData.PropertyName ] = newProperty;
            viewData.SourceTextField.Text = newProperty.Source;
            UpdateFieldsForSelectedTreeNode( );
            UpdateButtonState( );
        }

        private void StringRadioGroupOnMouseClick( MouseEventArgs args )
        {
            RadioGroupWithSourceViewData viewData = (RadioGroupWithSourceViewData)args.MouseEvent.View.Data;
            IZfsProperty newProperty = SelectedTreeNode.TreeDataset.UpdateProperty( viewData.PropertyName, viewData.RadioGroup.GetSelectedLabelString( ), "local" );
            _modifiedPropertiesSinceLastSaveForCurrentItem[ viewData.PropertyName ] = newProperty;
            viewData.SourceTextField.Text = newProperty.Source;
            UpdateFieldsForSelectedTreeNode( );
            UpdateButtonState( );
        }

        /// <summary>
        ///     Performs a depth-first recursion on the entire tree, updating all boolean properties appropriately
        /// </summary>
        /// <param name="currentNode"></param>
        /// <param name="prop"></param>
        /// <param name="source"></param>
        private static void UpdateDescendentsBooleanPropertyInheritance( ZfsObjectConfigurationTreeNode currentNode, ZfsProperty<bool> prop, string source )
        {
            foreach ( ZfsObjectConfigurationTreeNode child in currentNode.Children.Cast<ZfsObjectConfigurationTreeNode>( ) )
            {
                // If this child already has the property defined locally, we can skip it (and thus its descendents as well)
                if ( child.TreeDataset[ prop.Name ].IsLocal )
                {
                    continue;
                }

                UpdateDescendentsBooleanPropertyInheritance( child, prop, source );
            }

            // This is the final base case, for the node we started from
            if ( currentNode.TreeDataset[ prop.Name ].IsLocal )
            {
                return;
            }

            // For everyone that makes it this far, we need to inherit, so update the tree and base copies of the property
            currentNode.TreeDataset.UpdateProperty( prop.Name, prop.Value, source );
            currentNode.BaseDataset.UpdateProperty( prop.Name, prop.Value, source );
        }

        private static void UpdateDescendentsIntPropertyInheritance( ZfsObjectConfigurationTreeNode currentNode, ZfsProperty<int> prop, string source )
        {
            foreach ( ZfsObjectConfigurationTreeNode child in currentNode.Children.Cast<ZfsObjectConfigurationTreeNode>( ) )
            {
                UpdateDescendentsIntPropertyInheritance( child, prop, source );
            }

            // If this node already has the property defined locally, we can stop at this level
            if ( currentNode.TreeDataset[ prop.Name ].IsLocal )
            {
                return;
            }

            currentNode.TreeDataset.UpdateProperty( prop.Name, prop.Value, source );
            currentNode.BaseDataset.UpdateProperty( prop.Name, prop.Value, source );
        }

        private static void UpdateDescendentsStringPropertyInheritance( ZfsObjectConfigurationTreeNode currentNode, ZfsProperty<string> prop, string source )
        {
            foreach ( ZfsObjectConfigurationTreeNode child in currentNode.Children.Cast<ZfsObjectConfigurationTreeNode>( ) )
            {
                UpdateDescendentsStringPropertyInheritance( child, prop, source );
            }

            // If this node already has the property defined locally, we can stop at this level
            if ( currentNode.TreeDataset[ prop.Name ].IsLocal )
            {
                return;
            }

            currentNode.TreeDataset.UpdateProperty( prop.Name, prop.Value, source );
            currentNode.BaseDataset.UpdateProperty( prop.Name, prop.Value, source );
        }

        private static void UpdateDescendentsDateTimeOffsetPropertyInheritance( ZfsObjectConfigurationTreeNode currentNode, ZfsProperty<DateTimeOffset> prop, string source )
        {
            foreach ( ZfsObjectConfigurationTreeNode child in currentNode.Children.Cast<ZfsObjectConfigurationTreeNode>( ) )
            {
                UpdateDescendentsDateTimeOffsetPropertyInheritance( child, prop, source );
            }

            // If this node already has the property defined locally, we can stop at this level
            if ( currentNode.TreeDataset[ prop.Name ].IsLocal )
            {
                return;
            }

            currentNode.TreeDataset.UpdateProperty( prop.Name, prop.Value, source );
            currentNode.BaseDataset.UpdateProperty( prop.Name, prop.Value, source );
        }

        private void UpdateSelectedItemBooleanRadioGroupProperty( RadioGroup radioGroup, string? propertySource = null )
        {
            RadioGroupWithSourceViewData viewData = (RadioGroupWithSourceViewData)radioGroup.Data;
            ZfsProperty<bool> newProperty = SelectedTreeNode.TreeDataset.UpdateProperty( viewData.PropertyName, radioGroup.GetSelectedBooleanFromLabel( ), propertySource ?? SelectedTreeNode.TreeDataset[ viewData.PropertyName ].Source );
            _modifiedPropertiesSinceLastSaveForCurrentItem[ viewData.PropertyName ] = newProperty;
            viewData.SourceTextField.Text = propertySource ?? SelectedTreeNode.TreeDataset[ viewData.PropertyName ].Source;
        }

        private void UpdateSelectedItemStringRadioGroupProperty( RadioGroup radioGroup, string? propertySource = null )
        {
            RadioGroupWithSourceViewData viewData = (RadioGroupWithSourceViewData)radioGroup.Data;
            ZfsProperty<string> newProperty = (ZfsProperty<string>)SelectedTreeNode.TreeDataset.UpdateProperty( viewData.PropertyName, radioGroup.GetSelectedLabelString( ), propertySource ?? SelectedTreeNode.TreeDataset[ viewData.PropertyName ].Source );
            _modifiedPropertiesSinceLastSaveForCurrentItem[ viewData.PropertyName ] = newProperty;
            viewData.SourceTextField.Text = propertySource ?? SelectedTreeNode.TreeDataset[ viewData.PropertyName ].Source;
        }

        private void UpdateSelectedItemTextValidateFieldIntProperty( RetentionTextValidateFieldViewData viewData, string? propertySource = null )
        {
            if ( !int.TryParse( viewData.ValueTextField.Text?.ToString( ), out int intValue ) && ( intValue < viewData.MinValue || intValue > viewData.MaxValue ) )
            {
                Logger.Info( "Invalid value entered for {0}: {1}. Must be a valid integer between {2} and {3}", viewData.PropertyName, viewData.ValueTextField.Text, viewData.MinValue, viewData.MaxValue );
                viewData.ValueTextField.Text = ustring.Make( ( (ZfsProperty<int>)SelectedTreeNode.TreeDataset[ viewData.PropertyName ] ).Value );
                return;
            }

            ZfsProperty<int> newProperty = SelectedTreeNode.TreeDataset.UpdateProperty( viewData.PropertyName, intValue, propertySource ?? SelectedTreeNode.TreeDataset[ viewData.PropertyName ].Source );
            _modifiedPropertiesSinceLastSaveForCurrentItem[ viewData.PropertyName ] = newProperty;
            viewData.ValueTextField.ColorScheme = SelectedTreeNode.TreeDataset[ viewData.PropertyName ].IsInherited ? inheritedPropertyTextFieldColorScheme : localPropertyTextFieldColorScheme;
        }

        private void EnabledRadioGroupSelectedItemChanged( SelectedItemChangedArgs args )
        {
            UpdateSelectedItemBooleanRadioGroupProperty( enabledRadioGroup, "local" );
            UpdateButtonState( );
            UpdateFieldsForSelectedTreeNode( );
        }

        private void TakeSnapshotsRadioGroupSelectedItemChanged( SelectedItemChangedArgs args )
        {
            UpdateSelectedItemBooleanRadioGroupProperty( takeSnapshotsRadioGroup, "local" );
            UpdateButtonState( );
            UpdateFieldsForSelectedTreeNode( );
        }

        private void PruneSnapshotsRadioGroupSelectedItemChanged( SelectedItemChangedArgs args )
        {
            UpdateSelectedItemBooleanRadioGroupProperty( pruneSnapshotsRadioGroup, "local" );
            UpdateButtonState( );
            UpdateFieldsForSelectedTreeNode( );
        }

        private void zfsTreeViewOnSelectionChanged( object? sender, SelectionChangedEventArgs<ITreeNode> e )
        {
            ArgumentNullException.ThrowIfNull( sender );
            DisableEventHandlers( );

            ClearAllPropertyFields( );
            _modifiedPropertiesSinceLastSaveForCurrentItem.Clear( );

            // Be sure to set the previously-selected object back to its previous state if it wasn't saved
            if ( e.OldValue is ZfsObjectConfigurationTreeNode { IsModified: true } old )
            {
                old.TreeDataset = old.BaseDataset with { };
            }

            UpdateFieldsForSelectedTreeNode( false );
            UpdateButtonState( );
            EnableEventHandlers( );
        }

        private void RestorePreviousSelectedItem( )
        {
            SelectedTreeNode.TreeDataset = SelectedTreeNode.BaseDataset with { };
        }

        private void ClearAllPropertyFields( bool manageEventHandlers = false )
        {
            if ( manageEventHandlers )
            {
                DisableEventHandlers( );
            }

            nameTextField.Clear( );
            typeTextField.Clear( );
            enabledRadioGroup.Clear( );
            enabledSourceTextField.Clear( );
            takeSnapshotsRadioGroup.Clear( );
            takeSnapshotsSourceTextField.Clear( );
            pruneSnapshotsRadioGroup.Clear( );
            pruneSnapshotsSourceTextField.Clear( );
            recursionRadioGroup.Clear( );
            recursionSourceTextField.Clear( );
            templateListView.Clear( );
            templateSourceTextField.Clear( );
            retentionFrequentTextField.Clear( );
            retentionHourlyTextField.Clear( );
            retentionDailyTextField.Clear( );
            retentionWeeklyTextField.Clear( );
            retentionMonthlyTextField.Clear( );
            retentionYearlyTextField.Clear( );
            retentionPruneDeferralTextField.Clear( );
            recentFrequentTextField.Clear( );
            recentHourlyTextField.Clear( );
            recentDailyTextField.Clear( );
            recentWeeklyTextField.Clear( );
            recentMonthlyTextField.Clear( );
            recentYearlyTextField.Clear( );

            if ( manageEventHandlers )
            {
                EnableEventHandlers( );
            }
        }

        private void UpdateFieldsForSelectedTreeNode( bool manageEventHandlers = true )
        {
            if ( manageEventHandlers )
            {
                DisableEventHandlers( );
            }

            nameTextField.Text = SelectedTreeNode.TreeDataset.Name;
            typeTextField.Text = SelectedTreeNode.TreeDataset.Kind;
            enabledRadioGroup.SelectedItem = SelectedTreeNode.TreeDataset.Enabled.AsTrueFalseRadioIndex( );
            enabledRadioGroup.ColorScheme = SelectedTreeNode.TreeDataset.Enabled.IsInherited ? inheritedPropertyRadioGroupColorScheme : localPropertyRadioGroupColorScheme;
            enabledSourceTextField.Text = SelectedTreeNode.TreeDataset.Enabled.InheritedFrom;
            takeSnapshotsRadioGroup.SelectedItem = SelectedTreeNode.TreeDataset.TakeSnapshots.AsTrueFalseRadioIndex( );
            takeSnapshotsRadioGroup.ColorScheme = SelectedTreeNode.TreeDataset.TakeSnapshots.IsInherited ? inheritedPropertyRadioGroupColorScheme : localPropertyRadioGroupColorScheme;
            takeSnapshotsSourceTextField.Text = SelectedTreeNode.TreeDataset.TakeSnapshots.InheritedFrom;
            pruneSnapshotsRadioGroup.SelectedItem = SelectedTreeNode.TreeDataset.PruneSnapshots.AsTrueFalseRadioIndex( );
            pruneSnapshotsRadioGroup.ColorScheme = SelectedTreeNode.TreeDataset.PruneSnapshots.IsInherited ? inheritedPropertyRadioGroupColorScheme : localPropertyRadioGroupColorScheme;
            pruneSnapshotsSourceTextField.Text = SelectedTreeNode.TreeDataset.PruneSnapshots.InheritedFrom;
            recursionRadioGroup.SelectedItem = SelectedTreeNode.TreeDataset.Recursion.Value switch { "sanoid" => 0, "zfs" => 1, _ => throw new InvalidOperationException( "Invalid recursion value" ) };
            recursionRadioGroup.ColorScheme = SelectedTreeNode.TreeDataset.Recursion.IsInherited ? inheritedPropertyRadioGroupColorScheme : localPropertyRadioGroupColorScheme;
            recursionSourceTextField.Text = SelectedTreeNode.TreeDataset.Recursion.InheritedFrom;
            templateListView.SelectedItem = ConfigConsole.TemplateListItems.FindIndex( t => t.TemplateName == SelectedTreeNode.TreeDataset.Template.Value );
            templateListView.ColorScheme = SelectedTreeNode.TreeDataset.Template.IsInherited ? inheritedPropertyListViewColorScheme : localPropertyListViewColorScheme;
            templateListView.EnsureSelectedItemVisible( );
            templateSourceTextField.Text = SelectedTreeNode.TreeDataset.Template.InheritedFrom;

            retentionFrequentTextField.Text = SelectedTreeNode.TreeDataset.SnapshotRetentionFrequent.ValueString;
            retentionFrequentTextField.ColorScheme = SelectedTreeNode.TreeDataset.SnapshotRetentionFrequent.IsInherited ? inheritedPropertyTextFieldColorScheme : localPropertyTextFieldColorScheme;
            retentionHourlyTextField.Text = SelectedTreeNode.TreeDataset.SnapshotRetentionHourly.ValueString;
            retentionHourlyTextField.ColorScheme = SelectedTreeNode.TreeDataset.SnapshotRetentionHourly.IsInherited ? inheritedPropertyTextFieldColorScheme : localPropertyTextFieldColorScheme;
            retentionDailyTextField.Text = SelectedTreeNode.TreeDataset.SnapshotRetentionDaily.ValueString;
            retentionDailyTextField.ColorScheme = SelectedTreeNode.TreeDataset.SnapshotRetentionDaily.IsInherited ? inheritedPropertyTextFieldColorScheme : localPropertyTextFieldColorScheme;
            retentionWeeklyTextField.Text = SelectedTreeNode.TreeDataset.SnapshotRetentionWeekly.ValueString;
            retentionWeeklyTextField.ColorScheme = SelectedTreeNode.TreeDataset.SnapshotRetentionWeekly.IsInherited ? inheritedPropertyTextFieldColorScheme : localPropertyTextFieldColorScheme;
            retentionMonthlyTextField.Text = SelectedTreeNode.TreeDataset.SnapshotRetentionMonthly.ValueString;
            retentionMonthlyTextField.ColorScheme = SelectedTreeNode.TreeDataset.SnapshotRetentionMonthly.IsInherited ? inheritedPropertyTextFieldColorScheme : localPropertyTextFieldColorScheme;
            retentionYearlyTextField.Text = SelectedTreeNode.TreeDataset.SnapshotRetentionYearly.ValueString;
            retentionYearlyTextField.ColorScheme = SelectedTreeNode.TreeDataset.SnapshotRetentionYearly.IsInherited ? inheritedPropertyTextFieldColorScheme : localPropertyTextFieldColorScheme;
            retentionPruneDeferralTextField.Text = SelectedTreeNode.TreeDataset.SnapshotRetentionPruneDeferral.ValueString;
            retentionPruneDeferralTextField.ColorScheme = SelectedTreeNode.TreeDataset.SnapshotRetentionPruneDeferral.IsInherited ? inheritedPropertyTextFieldColorScheme : localPropertyTextFieldColorScheme;

            recentFrequentTextField.Text = SelectedTreeNode.TreeDataset.LastFrequentSnapshotTimestamp.IsLocal ? SelectedTreeNode.TreeDataset.LastFrequentSnapshotTimestamp.ValueString : "None";
            recentHourlyTextField.Text = SelectedTreeNode.TreeDataset.LastHourlySnapshotTimestamp.IsLocal ? SelectedTreeNode.TreeDataset.LastHourlySnapshotTimestamp.ValueString : "None";
            recentDailyTextField.Text = SelectedTreeNode.TreeDataset.LastDailySnapshotTimestamp.IsLocal ? SelectedTreeNode.TreeDataset.LastDailySnapshotTimestamp.ValueString : "None";
            recentWeeklyTextField.Text = SelectedTreeNode.TreeDataset.LastWeeklySnapshotTimestamp.IsLocal ? SelectedTreeNode.TreeDataset.LastWeeklySnapshotTimestamp.ValueString : "None";
            recentMonthlyTextField.Text = SelectedTreeNode.TreeDataset.LastMonthlySnapshotTimestamp.IsLocal ? SelectedTreeNode.TreeDataset.LastMonthlySnapshotTimestamp.ValueString : "None";
            recentYearlyTextField.Text = SelectedTreeNode.TreeDataset.LastYearlySnapshotTimestamp.IsLocal ? SelectedTreeNode.TreeDataset.LastYearlySnapshotTimestamp.ValueString : "None";

            if ( manageEventHandlers )
            {
                EnableEventHandlers( );
            }
        }

        private async Task RefreshZfsTreeViewFromZfsAsync( )
        {
            Logger.Debug( "Refreshing zfs configuration tree view" );
            DisableEventHandlers( );
            try
            {
                Logger.Debug( "Clearing objects from zfs configuration tree view" );
                zfsTreeView.ClearObjects( );
                _treeDatasets.Clear( );
                ConfigConsole.BaseDatasets.Clear( );
                _modifiedPropertiesSinceLastSaveForCurrentItem.Clear( );
                Logger.Debug( "Getting zfs objects from zfs and populating configuration tree view" );
                List<ITreeNode> treeRootNodes = await ZfsTasks.GetFullZfsConfigurationTreeAsync( ConfigConsole.BaseDatasets, _treeDatasets, ConfigConsole.Snapshots, ConfigConsole.CommandRunner! ).ConfigureAwait( true );

                zfsTreeView.AddObjects( treeRootNodes );
                UpdateButtonState( );
                zfsTreeView.SetFocus( );
            }
            catch ( Exception e )
            {
                Logger.Error( e, "Error getting ZFS configuration tree" );
            }

            EnableEventHandlers( );
            Logger.Debug( "Finished refreshing zfs configuration tree view" );
        }

        private void DisableEventHandlers( )
        {
            if ( !_eventsEnabled )
            {
                return;
            }

            Logger.Debug( "Disabling event handlers for zfs configuration fields" );

            refreshButton.Clicked -= RefreshZfsTreeViewFromZfs;
            resetCurrentButton.Clicked -= ResetCurrentButtonOnClicked;
            zfsTreeView.SelectionChanged -= zfsTreeViewOnSelectionChanged;
            enabledRadioGroup.SelectedItemChanged -= EnabledRadioGroupSelectedItemChanged;
            enabledRadioGroup.MouseClick -= BooleanRadioGroupOnMouseClick;
            takeSnapshotsRadioGroup.SelectedItemChanged -= TakeSnapshotsRadioGroupSelectedItemChanged;
            takeSnapshotsRadioGroup.MouseClick -= BooleanRadioGroupOnMouseClick;
            pruneSnapshotsRadioGroup.SelectedItemChanged -= PruneSnapshotsRadioGroupSelectedItemChanged;
            pruneSnapshotsRadioGroup.MouseClick -= BooleanRadioGroupOnMouseClick;
            recursionRadioGroup.SelectedItemChanged -= RecursionRadioGroupSelectedItemChanged;
            recursionRadioGroup.MouseClick -= StringRadioGroupOnMouseClick;
            templateListView.SelectedItemChanged -= TemplateListViewOnSelectedItemChanged;
            retentionFrequentTextField.Leave -= RetentionTextFieldOnLeave;
            retentionHourlyTextField.Leave -= RetentionTextFieldOnLeave;
            retentionDailyTextField.Leave -= RetentionTextFieldOnLeave;
            retentionWeeklyTextField.Leave -= RetentionTextFieldOnLeave;
            retentionMonthlyTextField.Leave -= RetentionTextFieldOnLeave;
            retentionYearlyTextField.Leave -= RetentionTextFieldOnLeave;
            retentionPruneDeferralTextField.Leave -= RetentionTextFieldOnLeave;
            saveCurrentButton.Clicked -= SaveCurrentButtonOnClicked;
            _eventsEnabled = false;
            Logger.Debug( "Event handlers for zfs configuration fields disabled" );
        }

        private async void RefreshZfsTreeViewFromZfs( )
        {
            await RefreshZfsTreeViewFromZfsAsync( ).ConfigureAwait( true );
        }

        private void EnableEventHandlers( )
        {
            if ( _eventsEnabled )
            {
                return;
            }

            Logger.Debug( "Enabling event handlers for zfs configuration fields" );

            refreshButton.Clicked += RefreshZfsTreeViewFromZfs;
            resetCurrentButton.Clicked += ResetCurrentButtonOnClicked;
            zfsTreeView.SelectionChanged += zfsTreeViewOnSelectionChanged;
            enabledRadioGroup.SelectedItemChanged += EnabledRadioGroupSelectedItemChanged;
            enabledRadioGroup.MouseClick += BooleanRadioGroupOnMouseClick;
            takeSnapshotsRadioGroup.SelectedItemChanged += TakeSnapshotsRadioGroupSelectedItemChanged;
            takeSnapshotsRadioGroup.MouseClick += BooleanRadioGroupOnMouseClick;
            pruneSnapshotsRadioGroup.SelectedItemChanged += PruneSnapshotsRadioGroupSelectedItemChanged;
            pruneSnapshotsRadioGroup.MouseClick += BooleanRadioGroupOnMouseClick;
            recursionRadioGroup.SelectedItemChanged += RecursionRadioGroupSelectedItemChanged;
            recursionRadioGroup.MouseClick += StringRadioGroupOnMouseClick;
            templateListView.SelectedItemChanged += TemplateListViewOnSelectedItemChanged;
            retentionFrequentTextField.Leave += RetentionTextFieldOnLeave;
            retentionHourlyTextField.Leave += RetentionTextFieldOnLeave;
            retentionDailyTextField.Leave += RetentionTextFieldOnLeave;
            retentionWeeklyTextField.Leave += RetentionTextFieldOnLeave;
            retentionMonthlyTextField.Leave += RetentionTextFieldOnLeave;
            retentionYearlyTextField.Leave += RetentionTextFieldOnLeave;
            retentionPruneDeferralTextField.Leave += RetentionTextFieldOnLeave;
            saveCurrentButton.Clicked += SaveCurrentButtonOnClicked;
            _eventsEnabled = true;
            Logger.Debug( "Event handlers for zfs configuration fields enabled" );
        }

        private record RadioGroupWithSourceViewData( string PropertyName, RadioGroup RadioGroup, TextField SourceTextField );

        private record ListViewWithSourceViewData( string PropertyName, ListView ValueListView, TextField SourceTextField );

        private record RetentionTextValidateFieldViewData( string PropertyName, TextValidateField ValueTextField, int MinValue, int MaxValue );
    }
}
