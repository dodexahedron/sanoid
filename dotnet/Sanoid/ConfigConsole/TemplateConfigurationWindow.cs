// LICENSE:
// 
// This software is licensed for use under the Free Software Foundation's GPL v3.0 license, as retrieved
// from http://www.gnu.org/licenses/gpl-3.0.html on 2014-11-17.  A copy should also be available in this
// project's Git repository at https://github.com/jimsalterjrs/sanoid/blob/master/LICENSE.

//  <auto-generated>
//      This code was generated by:
//        TerminalGuiDesigner v1.0.24.0
//      You can make changes to this file and they will not be overwritten when saving.
//  </auto-generated>
// -----------------------------------------------------------------------------

#nullable enable

using System.Collections.Concurrent;
using System.Text.Json;
using System.Text.Json.Serialization;
using NStack;
using Sanoid.Interop.Zfs.ZfsTypes;
using Sanoid.Settings.Settings;
using Terminal.Gui.TextValidateProviders;

namespace Sanoid.ConfigConsole
{
    using Terminal.Gui;

    public partial class TemplateConfigurationWindow
    {
        public TemplateConfigurationWindow( )
        {
            InitializeComponent( );
            InitializeTemplateEditorView( );
        }

        private readonly HashSet<string> _modifiedProperties = new( );
        private readonly HashSet<string> _namingProperties = new( new[] { "component separator", "prefix", "timestamp format", "frequent suffix", "hourly suffix", "daily suffix", "weekly suffix", "monthly suffix", "yearly suffix" } );

        private bool _templateConfigurationEventsEnabled;
        private readonly List<TextValidateFieldSettings> _templateConfigurationTextValidateFieldList = new( );
        private bool _templatesAddedOrRemoved;
        private readonly HashSet<string> _timingProperties = new( new[] { "frequent period", "hourly minute", "daily time", "weekly day", "weekly time", "monthly day", "monthly time", "yearly month", "yearly day", "yearly time" } );
        private static bool IsAnyTemplateModified => ConfigConsole.TemplateListItems.Any( t => t.IsModified );
        private bool IsEveryPropertyTextValidateFieldValid => _templateConfigurationTextValidateFieldList.TrueForAll( tvf => tvf.Field.IsValid );
        private bool IsSelectedTemplateInUse => ConfigConsole.BaseDatasets.Any( kvp => kvp.Value.Template.Value == SelectedTemplateItem.TemplateName );
        internal TemplateConfigurationListItem SelectedTemplateItem => ConfigConsole.TemplateListItems[ templateListView.SelectedItem ];

        private const string InvalidFieldValueDialogTitle = "Invalid Field Value";

        [NotNull]
        private static readonly Logger Logger = LogManager.GetCurrentClassLogger( );

        internal static readonly List<int> TemplateConfigurationFrequentPeriodOptions = new( ) { 5, 10, 15, 20, 30 };
        private static ConcurrentDictionary<string, TemplateSettings> Templates = new( );

        private void InitializeTemplateEditorView( )
        {
            DisableEventHandlers( );
            templateListView.SetSource( ConfigConsole.TemplateListItems );
            Templates.Clear( );
            Templates = new( Program.Settings!.Templates );
            Templates.TryRemove( "default", out _ );
            InitializeComboBoxes( );
            SetInitialButtonState( );
            InitializeTemplatePropertiesTextValidateFieldList( );
            SetValidateOnInputForAllTextValidateFields( );
            SetReadOnlyFields( );
            UpdateTemplateListButtonStates( );
            UpdateTemplatePropertiesButtonStates( );
            EnableEventHandlers( );
            templateListView.SelectedItem = 0;
            templateListView.SetFocus( );
        }

        private void SetReadOnlyFields( )
        {
            exampleTextField.ReadOnly = true;
            exampleTextField.CanFocus = false;
            exampleTextField.TabStop = false;
        }

        private void InitializeComboBoxes( )
        {
            yearlyMonthComboBox.SetSource( CultureTimeHelpers.MonthNamesLong );
            yearlyMonthComboBox.ReadOnly = true;
            yearlyMonthComboBox.HideDropdownListOnClick = true;
            yearlyMonthComboBox.KeyPress += EatKeyPresses;

            weeklyDayComboBox.SetSource( CultureTimeHelpers.DayNamesLong );
            weeklyDayComboBox.ReadOnly = true;
            weeklyDayComboBox.HideDropdownListOnClick = true;
            weeklyDayComboBox.KeyPress += EatKeyPresses;
        }

        private void EatKeyPresses( KeyEventEventArgs e )
        {
            // Disallow editing this combobox text
            // If the key press event is any control sequence, just return (to allow hotkeys to work).
            // If it's a character, set Handled=true to swallow the event and not change the text.
            // The Key enum is an unsigned int, so we can mask and check for greater than zero
            if ( e.KeyEvent.IsCtrl )
            {
                return;
            }

            if ( ( e.KeyEvent.Key & Key.CharMask ) > 0 )
            {
                e.Handled = true;
            }
        }

        private void SetInitialButtonState( )
        {
            deleteTemplateButton.Enabled = false;
            resetCurrentButton.Enabled = false;
            applyCurrentButton.Enabled = false;
        }

        private void InitializeTemplatePropertiesTextValidateFieldList( )
        {
            _templateConfigurationTextValidateFieldList.Clear( );
            _templateConfigurationTextValidateFieldList.Add( new( componentSeparatorValidateField, true ) );
            _templateConfigurationTextValidateFieldList.Add( new( prefixTextValidateField, true ) );
            _templateConfigurationTextValidateFieldList.Add( new( frequentSuffixTextValidateField, true ) );
            _templateConfigurationTextValidateFieldList.Add( new( hourlySuffixTextValidateField, true ) );
            _templateConfigurationTextValidateFieldList.Add( new( dailySuffixTextValidateField, true ) );
            _templateConfigurationTextValidateFieldList.Add( new( weeklySuffixTextValidateField, true ) );
            _templateConfigurationTextValidateFieldList.Add( new( monthlySuffixTextValidateField, true ) );
            _templateConfigurationTextValidateFieldList.Add( new( yearlySuffixTextValidateField, true ) );
            _templateConfigurationTextValidateFieldList.Add( new( hourlyMinuteTextValidateField, true ) );
            _templateConfigurationTextValidateFieldList.Add( new( monthlyDayTextValidateField, true ) );
            _templateConfigurationTextValidateFieldList.Add( new( yearlyDayTextValidateField, true ) );
        }

        private void SetValidateOnInputForAllTextValidateFields( )
        {
            _templateConfigurationTextValidateFieldList.ForEach( item => ( (TextRegexProvider)item.Field.Provider ).ValidateOnInput = item.ValidateOnInput );
            ( (TextRegexProvider)newTemplateNameTextValidateField.Provider ).ValidateOnInput = false;
        }

        private void EnableEventHandlers( )
        {
            if ( _templateConfigurationEventsEnabled )
            {
                return;
            }

            // Template list object events
            templateListView.SelectedItemChanged += TemplateListViewOnSelectedItemChanged;
            addTemplateButton.Clicked += AddTemplateButtonOnClicked;
            deleteTemplateButton.Clicked += DeleteDeleteTemplateButtonOnClicked;
            newTemplateNameTextValidateField.KeyPress += NewTemplateNameTextValidateFieldOnKeyPress;
            saveAllButton.Clicked += TemplateSettingsSaveAllButtonOnClicked;

            // Properties area field/button events
            //TODO: Warn user if they try to modify the default template
            applyCurrentButton.Clicked += ApplyCurrentButtonOnClicked;
            resetCurrentButton.Clicked += ResetCurrentButtonOnClicked;

            componentSeparatorValidateField.Leave += ComponentSeparatorValidateFieldOnLeave;
            prefixTextValidateField.Leave += PrefixTextValidateFieldOnLeave;
            timestampFormatTextField.Leave += TimestampFormatTextFieldOnLeave;
            frequentSuffixTextValidateField.Leave += FrequentSuffixTextValidateFieldOnLeave;
            hourlySuffixTextValidateField.Leave += HourlySuffixTextValidateFieldOnLeave;
            dailySuffixTextValidateField.Leave += DailySuffixTextValidateFieldOnLeave;
            weeklySuffixTextValidateField.Leave += WeeklySuffixTextValidateFieldOnLeave;

            hourlyMinuteTextValidateField.Leave += HourlyMinuteTextValidateFieldOnLeave;
            hourlyMinuteTextValidateField.KeyPress += HourlyMinuteTextValidateFieldOnKeyPress;
            dailyTimeTimeField.Leave += DailyTimeTimeFieldOnLeave;
            dailyTimeTimeField.KeyPress += DailyTimeTimeFieldOnKeyPress;
            weeklyDayComboBox.SelectedItemChanged += WeeklyDayComboBoxOnSelectedItemChanged;
            yearlyMonthComboBox.SelectedItemChanged += YearlyMonthComboBoxOnSelectedItemChanged;

            _templateConfigurationEventsEnabled = true;
        }

        private void WeeklySuffixTextValidateFieldOnLeave( FocusEventArgs obj )
        {
            try
            {
                DisableEventHandlers();
                _modifiedProperties.Remove( "weekly suffix" );

                if ( !weeklySuffixTextValidateField.IsValid )
                {
                    int messageBoxResult = MessageBox.ErrorQuery( InvalidFieldValueDialogTitle, "Value entered for Weekly Suffix is invalid. Must be 1-12 characters from the following set: [0-9a-zA-Z].\nDefault is \"weekly\".", 1, "Fix It Myself", "Use Default Value" );
                    if ( messageBoxResult == 1 )
                    {
                        weeklySuffixTextValidateField.Text = "weekly";
                    }
                    else
                    {
                        weeklySuffixTextValidateField.SetFocus( );
                        return;
                    }
                }

                if ( SelectedTemplateItem.ViewSettings.Formatting.WeeklySuffix != weeklySuffixTextValidateField.Text.ToString( ) )
                {
                    _modifiedProperties.Add( "weekly suffix" );
                }

                UpdatePropertiesFrameViewState( );
            }
            finally
            {
                EnableEventHandlers();
            }
        }

        private void DailySuffixTextValidateFieldOnLeave( FocusEventArgs e )
        {
            try
            {
                DisableEventHandlers();
                _modifiedProperties.Remove( "daily suffix" );

                if ( !dailySuffixTextValidateField.IsValid )
                {
                    int messageBoxResult = MessageBox.ErrorQuery( InvalidFieldValueDialogTitle, "Value entered for Daily Suffix is invalid. Must be 1-12 characters from the following set: [0-9a-zA-Z].\nDefault is \"daily\".", 1, "Fix It Myself", "Use Default Value" );
                    if ( messageBoxResult == 1 )
                    {
                        dailySuffixTextValidateField.Text = "hourly";
                    }
                    else
                    {
                        dailySuffixTextValidateField.SetFocus( );
                        return;
                    }
                }

                if ( SelectedTemplateItem.ViewSettings.Formatting.DailySuffix != dailySuffixTextValidateField.Text.ToString( ) )
                {
                    _modifiedProperties.Add( "daily suffix" );
                }

                UpdatePropertiesFrameViewState( );
            }
            finally
            {
                EnableEventHandlers();
            }
        }

        private void HourlySuffixTextValidateFieldOnLeave( FocusEventArgs e )
        {
            try
            {
                DisableEventHandlers();
                _modifiedProperties.Remove( "hourly suffix" );

                if ( !hourlySuffixTextValidateField.IsValid )
                {
                    int messageBoxResult = MessageBox.ErrorQuery( InvalidFieldValueDialogTitle, "Value entered for Hourly Suffix is invalid. Must be 1-12 characters from the following set: [0-9a-zA-Z].\nDefault is \"hourly\".", 1, "Fix It Myself", "Use Default Value" );
                    if ( messageBoxResult == 1 )
                    {
                        hourlySuffixTextValidateField.Text = "hourly";
                    }
                    else
                    {
                        hourlySuffixTextValidateField.SetFocus( );
                        return;
                    }
                }

                if ( SelectedTemplateItem.ViewSettings.Formatting.HourlySuffix != hourlySuffixTextValidateField.Text.ToString( ) )
                {
                    _modifiedProperties.Add( "hourly suffix" );
                }

                UpdatePropertiesFrameViewState( );
            }
            finally
            {
                EnableEventHandlers();
            }
        }

        private void FrequentSuffixTextValidateFieldOnLeave( FocusEventArgs e )
        {
            try
            {
                DisableEventHandlers( );
                _modifiedProperties.Remove( "frequent suffix" );

                if ( !frequentSuffixTextValidateField.IsValid )
                {
                    int messageBoxResult = MessageBox.ErrorQuery( InvalidFieldValueDialogTitle, "Value entered for Frequent Suffix is invalid. Must be 1-12 characters from the following set: [0-9a-zA-Z].\nDefault is \"frequently\".", 1, "Fix It Myself", "Use Default Value" );
                    if ( messageBoxResult == 1 )
                    {
                        frequentSuffixTextValidateField.Text = "frequently";
                    }
                    else
                    {
                        frequentSuffixTextValidateField.SetFocus( );
                        return;
                    }
                }

                if ( SelectedTemplateItem.ViewSettings.Formatting.FrequentSuffix != frequentSuffixTextValidateField.Text.ToString( ) )
                {
                    _modifiedProperties.Add( "frequent suffix" );
                }

                UpdatePropertiesFrameViewState( );
            }
            finally
            {
                EnableEventHandlers( );
            }
        }

        private void TimestampFormatTextFieldOnLeave( FocusEventArgs e )
        {
            try
            {
                DisableEventHandlers( );
                _modifiedProperties.Remove( "timestamp format" );

                if ( timestampFormatTextField.Text.IsEmpty )
                {
                    int messageBoxResult = MessageBox.ErrorQuery( "Invalid Field Value", "Timestamp format string cannot be empty or whitespace-only", "Fix It Myself", "Use Default" );
                    if ( messageBoxResult == 1 )
                    {
                        timestampFormatTextField.Text = FormattingSettings.GetDefault( ).TimestampFormatString;
                    }
                    else
                    {
                        timestampFormatTextField.SetFocus( );
                        return;
                    }
                }

                string timestampFormatString = timestampFormatTextField.Text.ToString( )!;
                DateTimeOffset now = DateTimeOffset.Now;
                char[] buffer = new char[128];
                if ( !now.TryFormat( buffer.AsSpan( ), out _, timestampFormatString.AsSpan( ) ) )
                {
                    Logger.Warn( "Invalid timestamp format string specified." );
                    const string formatDocumentationUrl = "https://learn.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings";
                    MessageBox.ErrorQuery( InvalidFieldValueDialogTitle, $"Timestamp Format String is not a valid format string. See the following documentation for valid format strings:\n{formatDocumentationUrl}" );
                    return;
                }

                if ( SelectedTemplateItem.ViewSettings.Formatting.TimestampFormatString != timestampFormatTextField.Text.ToString( ) )
                {
                    _modifiedProperties.Add( "timestamp format" );
                }

                UpdatePropertiesFrameViewState( );
            }
            finally
            {
                EnableEventHandlers( );
            }
        }

        private void PrefixTextValidateFieldOnLeave( FocusEventArgs e )
        {
            _modifiedProperties.Remove( "prefix" );

            if ( !prefixTextValidateField.IsValid )
            {
                MessageBox.ErrorQuery( InvalidFieldValueDialogTitle, "Value entered for Prefix is invalid. Must be 1-12 characters from the following set: [0-9a-zA-Z]" );
                prefixTextValidateField.SetFocus( );
                return;
            }

            if ( SelectedTemplateItem.ViewSettings.Formatting.Prefix != prefixTextValidateField.Text.ToString( ) )
            {
                _modifiedProperties.Add( "prefix" );
            }

            UpdatePropertiesFrameViewState( );
        }

        /// <summary>
        ///     Updates buttons and other input-dependent fields
        /// </summary>
        /// <remarks>Intended to be run after an input field value has changed</remarks>
        private void UpdatePropertiesFrameViewState( string periodString = "daily" )
        {
            UpdateTemplatePropertiesButtonStates( );
            UpdateExampleText( periodString );
        }

        private void UpdateExampleText( string periodString )
        {
            if ( !IsEveryPropertyTextValidateFieldValid )
            {
                return;
            }

            string timestampFormatString = timestampFormatTextField.Text.ToString( )!;
            DateTimeOffset now = DateTimeOffset.Now;
            char[] buffer = new char[128];
            if ( !now.TryFormat( buffer.AsSpan( ), out _, timestampFormatString.AsSpan( ) ) )
            {
                Logger.Warn( "Invalid timestamp format string specified." );
                return;
            }

            string prefixString = prefixTextValidateField.Text.ToString( )!;
            string componentSeparator = componentSeparatorValidateField.Text.ToString( )!;
            exampleTextField.Text = $"{prefixString}{componentSeparator}{DateTimeOffset.Now.ToString( timestampFormatString )}{componentSeparator}{periodString}";
        }

        private void ComponentSeparatorValidateFieldOnLeave( FocusEventArgs e )
        {
            _modifiedProperties.Remove( "component separator" );

            if ( !componentSeparatorValidateField.IsValid )
            {
                MessageBox.ErrorQuery( InvalidFieldValueDialogTitle, "Value entered for Component Separator is invalid. Must be exactly one character from the following set: [0-9a-zA-Z:.+_-]" );
                componentSeparatorValidateField.SetFocus( );
            }

            if ( SelectedTemplateItem.ViewSettings.Formatting.ComponentSeparator != componentSeparatorValidateField.Text.ToString( ) )
            {
                _modifiedProperties.Add( "component separator" );
            }

            UpdatePropertiesFrameViewState( );
        }

        private void ApplyCurrentButtonOnClicked( )
        {
            if ( !IsEveryPropertyTextValidateFieldValid )
            {
                Logger.Error( "Apply template button was clicked while fields were not valid. This should not happen. Please report this." );
                return;
            }

            if ( _modifiedProperties.Count == 0 )
            {
                Logger.Error( "Apply template button was clicked while no values were different from their original values. This should not happen. Please report this." );
                return;
            }

            if ( _modifiedProperties.Overlaps( _namingProperties ) )
            {
                SelectedTemplateItem.ViewSettings.Formatting = new( )
                {
                    ComponentSeparator = componentSeparatorValidateField.Text.ToString( )!,
                    Prefix = prefixTextValidateField.Text.ToString( )!,
                    TimestampFormatString = timestampFormatTextField.Text.ToString( )!,
                    FrequentSuffix = frequentSuffixTextValidateField.Text.ToString( )!,
                    HourlySuffix = hourlySuffixTextValidateField.Text.ToString( )!,
                    DailySuffix = dailySuffixTextValidateField.Text.ToString( )!,
                    WeeklySuffix = weeklySuffixTextValidateField.Text.ToString( )!,
                    MonthlySuffix = monthlySuffixTextValidateField.Text.ToString( )!,
                    YearlySuffix = yearlySuffixTextValidateField.Text.ToString( )!
                };
            }

            if ( _modifiedProperties.Overlaps( _timingProperties ) )
            {
                SelectedTemplateItem.ViewSettings.SnapshotTiming = SelectedTemplateItem.ViewSettings.SnapshotTiming with
                {
                    FrequentPeriod = int.Parse( frequentPeriodRadioGroup.GetSelectedLabelString( ) ),
                    HourlyMinute = hourlyMinuteTextValidateField.Text.ToInt32( ),
                    DailyTime = dailyTimeTimeField.Time.ToTimeOnly( ),
                    WeeklyDay = (DayOfWeek)weeklyDayComboBox.SelectedItem,
                    WeeklyTime = weeklyTimeTimeField.Time.ToTimeOnly( ),
                    MonthlyDay = monthlyDayTextValidateField.Text.ToInt32( ),
                    MonthlyTime = monthlyTimeTimeField.Time.ToTimeOnly( ),
                    YearlyMonth = yearlyMonthComboBox.SelectedItem + 1,
                    YearlyDay = yearlyDayTextValidateField.Text.ToInt32( ),
                    YearlyTime = yearlyTimeTimeField.Time.ToTimeOnly( )
                };
            }

            _modifiedProperties.Clear( );
            UpdatePropertiesFrameViewState( );
        }

        private void DailyTimeTimeFieldOnKeyPress( KeyEventEventArgs e )
        {
            if ( !dailyTimeTimeField.IsDirty )
            {
                return;
            }

            bool isTimeValueDifferent = SelectedTemplateItem.ViewSettings.SnapshotTiming.DailyTime != dailyTimeTimeField.Time.ToTimeOnly( );
            applyCurrentButton.Enabled = isTimeValueDifferent && IsEveryPropertyTextValidateFieldValid;
        }

        private void HourlyMinuteTextValidateFieldOnKeyPress( KeyEventEventArgs e )
        {
            bool fieldIsValid = hourlyMinuteTextValidateField.IsValid;
            bool isMinuteValueDifferent = SelectedTemplateItem.ViewSettings.SnapshotTiming.HourlyMinute != hourlyMinuteTextValidateField.Text.ToInt32( int.MinValue );
            applyCurrentButton.Enabled = fieldIsValid && isMinuteValueDifferent && IsEveryPropertyTextValidateFieldValid;
        }

        private void NewTemplateNameTextValidateFieldOnKeyPress( KeyEventEventArgs e )
        {
            if ( !newTemplateNameTextValidateField.Text.IsEmpty && newTemplateNameTextValidateField.IsValid )
            {
                string newTemplateName = newTemplateNameTextValidateField.Text.ToString( )!;
                addTemplateButton.Enabled = newTemplateName != "default" && !Templates.ContainsKey( newTemplateName );
            }
            else
            {
                addTemplateButton.Enabled = false;
            }
        }

        /// <exception cref="ApplicationException">
        ///     If removal of the selected template from <see cref="Templates" /> fails.<br />
        ///     Should be treated as fatal by any consumers
        /// </exception>
        private void DeleteDeleteTemplateButtonOnClicked( )
        {
            try
            {
                DisableEventHandlers( );
                string templateName = SelectedTemplateItem.TemplateName;
                Logger.Debug( "Validating selected template {0} for removal", templateName );
                if ( templateName == "default" )
                {
                    const string errorMessage = "Cannot delete the default template.";
                    Logger.Warn( errorMessage );
                    MessageBox.ErrorQuery( "Cannot Delete Template", errorMessage, 0, "OK" );
                    return;
                }

                if ( IsSelectedTemplateInUse )
                {
                    string errorMessage = $"Selected template {templateName} is in use by one or more objects in ZFS. Cannot delete template.";
                    Logger.Warn( errorMessage );
                    MessageBox.ErrorQuery( "Cannot Delete Template", errorMessage, 0, "OK" );
                    return;
                }

                Logger.Debug( "Template {0} can be removed. Removing", templateName );

                // Grab the currently selected index, decrement the selection in the ListView,
                // and remove the saved index from the source collection
                int indexToRemove = templateListView.SelectedItem;
                templateListView.SelectedItem -= 1;
                templateListView.EnsureSelectedItemVisible( );
                ConfigConsole.TemplateListItems.RemoveAt( indexToRemove );
                if ( !Templates.TryRemove( templateName, out _ ) )
                {
                    // The application state is inconsistent if this happens, and it isn't safe to continue
                    string errorMessage = $"Failed to remove template {templateName} from UI dictionary";
                    TemplateRemovalException ex = new( errorMessage );
                    Logger.Fatal( ex, errorMessage );
                    throw ex;
                }

                _templatesAddedOrRemoved = true;
            }
            catch ( ApplicationException )
            {
                // If we threw the KeyNotFoundException above, we need to exit.
                // Also, re-throw so we can deal with it in the caller as well.
                Application.Top.RequestStop( );
                throw;
            }

            UpdateTemplateListButtonStates( );
            EnableEventHandlers( );
        }

        private void AddTemplateButtonOnClicked( )
        {
            if ( !Templates.TryGetValue( "default", out _ ) )
            {
                string errorMessage = "'default' template does not exist. Not creating new template.";
                Logger.Error( errorMessage );
                MessageBox.ErrorQuery( "Error Adding Template", errorMessage, 0, "OK" );
                return;
            }

            if ( !newTemplateNameTextValidateField.IsValid )
            {
                string errorMessage = "New template name not valid. Not creating new template.";
                Logger.Error( errorMessage );
                MessageBox.ErrorQuery( "Error Adding Template", errorMessage, 0, "OK" );
                return;
            }

            string? newTemplateName = newTemplateNameTextValidateField.Text.ToString( );
            if ( Templates.ContainsKey( newTemplateName! ) )
            {
                string errorMessage = $"A template named {newTemplateName} already exists.";
                Logger.Error( errorMessage );
                MessageBox.ErrorQuery( "Error Adding Template", errorMessage, 0, "OK" );
                return;
            }

            Templates[ newTemplateName! ] = SelectedTemplateItem.ViewSettings with { };
            ConfigConsole.TemplateListItems.Add( new( newTemplateName!, SelectedTemplateItem.ViewSettings with { }, SelectedTemplateItem.ViewSettings with { } ) );
            _templatesAddedOrRemoved = true;
            UpdateTemplateListButtonStates( );
            UpdateTemplatePropertiesButtonStates( );
        }

        private void DailyTimeTimeFieldOnLeave( FocusEventArgs e )
        {
            UpdateTemplatePropertiesButtonStates( );
        }

        private void HourlyMinuteTextValidateFieldOnLeave( FocusEventArgs e )
        {
            if ( hourlyMinuteTextValidateField.IsValid )
            {
                if ( !int.TryParse( hourlyMinuteTextValidateField.Text.ToString( ), out int hourlyMinute ) && hourlyMinute is < 0 or > 59 )
                {
                    const string errorMessage = "The value entered for Hourly Minute is invalid. Field will be reset to previous value.";
                    Logger.Warn( errorMessage );
                    MessageBox.ErrorQuery( "Invalid Hourly Minute Value", errorMessage, "OK" );
                    hourlyMinuteTextValidateField.Text = SelectedTemplateItem.ViewSettings.SnapshotTiming.HourlyMinute.ToString( "D2" );
                    return;
                }

                SelectedTemplateItem.ViewSettings.SnapshotTiming = SelectedTemplateItem.ViewSettings.SnapshotTiming with { HourlyMinute = hourlyMinute };
            }

            UpdateTemplateListButtonStates( );
        }

        private void ResetCurrentButtonOnClicked( )
        {
            DisableEventHandlers( );
            SelectedTemplateItem.ViewSettings = SelectedTemplateItem.BaseSettings with { };
            SetFieldsForSelectedItem( );
            UpdateTemplatePropertiesButtonStates( );
            UpdateTemplateListButtonStates( );
            EnableEventHandlers( );
        }

        private void UpdateTemplateListButtonStates( )
        {
            saveAllButton.Enabled = ( _templatesAddedOrRemoved || IsAnyTemplateModified ) && IsEveryPropertyTextValidateFieldValid;
            deleteTemplateButton.Enabled = templateListView.SelectedItem >= 0 && !IsSelectedTemplateInUse;
            addTemplateButton.Enabled = newTemplateNameTextValidateField.IsValid;
        }

        private void UpdateTemplatePropertiesButtonStates( )
        {
            resetCurrentButton.Enabled = _modifiedProperties.Count > 0;
            applyCurrentButton.Enabled = _modifiedProperties.Count > 0;
        }

        private void TemplateListViewOnSelectedItemChanged( ListViewItemEventArgs e )
        {
            DisableEventHandlers( );

            templateListView.EnsureSelectedItemVisible( );

            SetFieldsForSelectedItem( );

            UpdateTemplateListButtonStates( );

            EnableEventHandlers( );
        }

        private void SetFieldsForSelectedItem( )
        {
            TemplateConfigurationListItem item = SelectedTemplateItem;
            componentSeparatorValidateField.Text = ustring.Make( item.ViewSettings.Formatting.ComponentSeparator );
            prefixTextValidateField.Text = ustring.Make( item.ViewSettings.Formatting.Prefix );
            frequentSuffixTextValidateField.Text = ustring.Make( item.ViewSettings.Formatting.FrequentSuffix );
            hourlySuffixTextValidateField.Text = ustring.Make( item.ViewSettings.Formatting.HourlySuffix );
            dailySuffixTextValidateField.Text = ustring.Make( item.ViewSettings.Formatting.DailySuffix );
            weeklySuffixTextValidateField.Text = ustring.Make( item.ViewSettings.Formatting.WeeklySuffix );
            monthlySuffixTextValidateField.Text = ustring.Make( item.ViewSettings.Formatting.MonthlySuffix );
            yearlySuffixTextValidateField.Text = ustring.Make( item.ViewSettings.Formatting.YearlySuffix );
            timestampFormatTextField.Text = ustring.Make( item.ViewSettings.Formatting.TimestampFormatString );
            frequentPeriodRadioGroup.SelectedItem = TemplateConfigurationFrequentPeriodOptions.IndexOf( item.ViewSettings.SnapshotTiming.FrequentPeriod );
            hourlyMinuteTextValidateField.Text = item.ViewSettings.SnapshotTiming.HourlyMinute.ToString( "D2" );
            dailyTimeTimeField.Time = item.ViewSettings.SnapshotTiming.DailyTime.ToTimeSpan( );
            weeklyDayComboBox.SelectedItem = (int)item.ViewSettings.SnapshotTiming.WeeklyDay;
            weeklyTimeTimeField.Time = item.ViewSettings.SnapshotTiming.WeeklyTime.ToTimeSpan( );
            monthlyDayTextValidateField.Text = item.ViewSettings.SnapshotTiming.MonthlyDay.ToString( );
            monthlyTimeTimeField.Time = item.ViewSettings.SnapshotTiming.MonthlyTime.ToTimeSpan( );
            yearlyDayTextValidateField.Text = item.ViewSettings.SnapshotTiming.YearlyDay.ToString( );
            yearlyTimeTimeField.Time = item.ViewSettings.SnapshotTiming.YearlyTime.ToTimeSpan( );
            yearlyMonthComboBox.SelectedItem = item.ViewSettings.SnapshotTiming.YearlyMonth - 1;
        }

        private void TemplateSettingsSaveAllButtonOnClicked( )
        {
            TemplateConfigurationValidator validator = new( );

            if ( validator.ValidateFieldValues( this ) is { IsValid: false, ValidationExceptions.Count: > 0 } result )
            {
                TemplateValidationException ex = new( "One or more template fields failed to validate", result.ValidationExceptions );
                Logger.Warn( ex );
                return;
            }

            SelectedTemplateItem.ViewSettings = SelectedTemplateItem.ViewSettings with
            {
                Formatting = new( )
                {
                    ComponentSeparator = validator.NamingComponentSeparator!,
                    Prefix = validator.NamingPrefix!,
                    TimestampFormatString = validator.NamingTimestampFormatString!,
                    FrequentSuffix = validator.NamingFrequentSuffix!,
                    HourlySuffix = validator.NamingHourlySuffix!,
                    DailySuffix = validator.NamingDailySuffix!,
                    WeeklySuffix = validator.NamingWeeklySuffix!,
                    MonthlySuffix = validator.NamingMonthlySuffix!,
                    YearlySuffix = validator.NamingYearlySuffix!
                },
                SnapshotTiming = SelectedTemplateItem.ViewSettings.SnapshotTiming with
                {
                    FrequentPeriod = validator.TimingFrequentPeriod!.Value,
                    HourlyMinute = validator.TimingHourlyMinute!.Value,
                    DailyTime = validator.TimingDailyTime,
                    WeeklyDay = validator.TimingWeeklyDay!.Value,
                    WeeklyTime = validator.TimingWeeklyTime,
                    MonthlyDay = validator.TimingMonthlyDay!.Value,
                    MonthlyTime = validator.TimingMonthlyTime,
                    YearlyMonth = validator.TimingYearlyMonth!.Value,
                    YearlyDay = validator.TimingYearlyDay!.Value,
                    YearlyTime = validator.TimingYearlyTime
                }
            };

            if ( SelectedTemplateItem.IsModified )
            {
                Templates[ SelectedTemplateItem.TemplateName ] = SelectedTemplateItem.ViewSettings;
                TemplateConfigurationShowSaveDialog( );
            }

            UpdateTemplateListButtonStates( );
        }

        private void TemplateConfigurationShowSaveDialog( )
        {
            using ( SaveDialog saveDialog = new( "Save Global Configuration", "Select file to save global configuration", new( ) { ".json" } ) )
            {
                saveDialog.AllowsOtherFileTypes = true;
                saveDialog.CanCreateDirectories = true;
                saveDialog.Modal = true;
                Application.Run( saveDialog );
                if ( saveDialog.Canceled )
                {
                    return;
                }

                if ( saveDialog.FileName.IsEmpty )
                {
                    return;
                }

                SanoidSettings settings = Program.Settings! with
                {
                    Templates = Templates.ToDictionary( kvp => kvp.Key, kvp => kvp.Value )
                };
                SelectedTemplateItem.BaseSettings = SelectedTemplateItem.ViewSettings with { };
                Program.Settings = settings with { };

                File.WriteAllText( saveDialog.FileName.ToString( ) ?? throw new InvalidOperationException( "Null string provided for save file name" ), JsonSerializer.Serialize( Program.Settings, new JsonSerializerOptions { WriteIndented = true, DefaultIgnoreCondition = JsonIgnoreCondition.Never } ) );
            }

            UpdateTemplateListButtonStates( );
        }

        private void DisableEventHandlers( )
        {
            if ( !_templateConfigurationEventsEnabled )
            {
                return;
            }

            // Template list object events
            templateListView.SelectedItemChanged -= TemplateListViewOnSelectedItemChanged;
            addTemplateButton.Clicked -= AddTemplateButtonOnClicked;
            deleteTemplateButton.Clicked -= DeleteDeleteTemplateButtonOnClicked;
            newTemplateNameTextValidateField.KeyPress -= NewTemplateNameTextValidateFieldOnKeyPress;
            saveAllButton.Clicked -= TemplateSettingsSaveAllButtonOnClicked;

            // Properties area field/button events
            //TODO: Warn user if they try to modify the default template
            applyCurrentButton.Clicked -= ApplyCurrentButtonOnClicked;
            resetCurrentButton.Clicked -= ResetCurrentButtonOnClicked;

            componentSeparatorValidateField.Leave -= ComponentSeparatorValidateFieldOnLeave;
            prefixTextValidateField.Leave -= PrefixTextValidateFieldOnLeave;
            timestampFormatTextField.Leave -= TimestampFormatTextFieldOnLeave;
            frequentSuffixTextValidateField.Leave -= FrequentSuffixTextValidateFieldOnLeave;
            hourlySuffixTextValidateField.Leave -= HourlySuffixTextValidateFieldOnLeave;
            dailySuffixTextValidateField.Leave -= DailySuffixTextValidateFieldOnLeave;

            hourlyMinuteTextValidateField.Leave -= HourlyMinuteTextValidateFieldOnLeave;
            hourlyMinuteTextValidateField.KeyPress -= HourlyMinuteTextValidateFieldOnKeyPress;
            dailyTimeTimeField.Leave -= DailyTimeTimeFieldOnLeave;
            dailyTimeTimeField.KeyPress -= DailyTimeTimeFieldOnKeyPress;
            weeklyDayComboBox.SelectedItemChanged -= WeeklyDayComboBoxOnSelectedItemChanged;
            yearlyMonthComboBox.SelectedItemChanged -= YearlyMonthComboBoxOnSelectedItemChanged;

            _templateConfigurationEventsEnabled = false;
        }

        private void WeeklyDayComboBoxOnSelectedItemChanged( ListViewItemEventArgs e )
        {
        }

        private void YearlyMonthComboBoxOnSelectedItemChanged( ListViewItemEventArgs e )
        {
            SelectedTemplateItem.ViewSettings.SnapshotTiming = SelectedTemplateItem.ViewSettings.SnapshotTiming with
            {
                YearlyMonth = e.Item + 1
            };
            UpdateTemplatePropertiesButtonStates( );
        }

        private record TextValidateFieldSettings( TextValidateField Field, bool ValidateOnInput );
    }
}
