// LICENSE:
// 
// This software is licensed for use under the Free Software Foundation's GPL v3.0 license, as retrieved
// from http://www.gnu.org/licenses/gpl-3.0.html on 2014-11-17.  A copy should also be available in this
// project's Git repository at https://github.com/jimsalterjrs/sanoid/blob/master/LICENSE.

//  <auto-generated>
//      This code was generated by:
//        TerminalGuiDesigner v1.0.24.0
//      You can make changes to this file and they will not be overwritten when saving.
//  </auto-generated>
// -----------------------------------------------------------------------------

#nullable enable

namespace Sanoid.ConfigConsole
{
    using Terminal.Gui;

    public partial class GlobalConfigurationWindow
    {
        public GlobalConfigurationWindow( )
        {
            Initialized += GlobalConfigurationWindowOnInitialized;
            InitializeComponent( );
            EnableEventHandlers( );
        }

        private void GlobalConfigurationWindowOnInitialized( object? sender, EventArgs e )
        {
            SetFieldsFromSettingsObject( false );
        }

        private bool _eventsEnabled;
        [NotNull]
        private static readonly Logger Logger = LogManager.GetCurrentClassLogger( );

        internal bool IsConfigurationChanged =>
            ValidateGlobalConfigValues( )
            && ( Program.Settings!.DryRun != dryRunRadioGroup.GetSelectedBooleanFromLabel( )
                 || Program.Settings.TakeSnapshots != takeSnapshotsRadioGroup.GetSelectedBooleanFromLabel( )
                 || Program.Settings.PruneSnapshots != pruneSnapshotsRadioGroup.GetSelectedBooleanFromLabel( )
                 || Program.Settings.ZfsPath != pathToZfsTextField.Text.ToString( )!
                 || Program.Settings.ZpoolPath != pathToZpoolTextField.Text.ToString( )! );

        private void DisableEventHandlers( )
        {
            if ( !_eventsEnabled )
            {
                return;
            }

            resetGlobalConfigButton.Clicked -= ResetButtonOnClicked;

            _eventsEnabled = false;
        }

        private void EnableEventHandlers( )
        {
            if ( _eventsEnabled )
            {
                return;
            }

            resetGlobalConfigButton.Clicked += ResetButtonOnClicked;
            _eventsEnabled = true;
        }

        internal bool ValidateGlobalConfigValues( )
        {
            if ( pathToZfsTextField.Text.IsEmpty || pathToZpoolTextField.Text.IsEmpty )
            {
                return false;
            }

            if ( Environment.OSVersion.Platform == PlatformID.Unix && (!File.Exists( pathToZfsTextField.Text.ToString( ) ) || !File.Exists( pathToZpoolTextField.Text.ToString( ) ) ))
            {
                return false;
            }

            return true;
        }

        private void ResetButtonOnClicked( )
        {
            SetFieldsFromSettingsObject( );
        }

        private void SetFieldsFromSettingsObject( bool manageEventHandlers = true )
        {
            if ( manageEventHandlers )
            {
                DisableEventHandlers( );
            }

            Logger.Debug( "Setting global configuration fields to values in Settings" );

            dryRunRadioGroup.SelectedItem = Program.Settings!.DryRun ? 0 : 1;
            takeSnapshotsRadioGroup.SelectedItem = Program.Settings.TakeSnapshots ? 0 : 1;
            pruneSnapshotsRadioGroup.SelectedItem = Program.Settings.PruneSnapshots ? 0 : 1;
            pathToZfsTextField.Text = Program.Settings.ZfsPath;
            pathToZpoolTextField.Text = Program.Settings.ZpoolPath;

            Logger.Debug( "Finished setting global configuration fields to values in Settings" );

            if ( manageEventHandlers )
            {
                EnableEventHandlers( );
            }
        }
    }
}
