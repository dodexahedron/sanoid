// LICENSE:
// 
// This software is licensed for use under the Free Software Foundation's GPL v3.0 license, as retrieved
// from http://www.gnu.org/licenses/gpl-3.0.html on 2014-11-17.  A copy should also be available in this
// project's Git repository at https://github.com/jimsalterjrs/sanoid/blob/master/LICENSE.

#nullable enable

using System.Runtime.CompilerServices;

//  <auto-generated>
//      This code was generated by:
//        TerminalGuiDesigner v1.0.24.0
//      You can make changes to this file and they will not be overwritten when saving.
//  </auto-generated>
// -----------------------------------------------------------------------------

namespace Sanoid.ConfigConsole
{
    using System;
    using Terminal.Gui;

    public partial class SanoidConfigConsole
    {
        public SanoidConfigConsole( )
        {
            Initialized+= OnInitialized;
            Ready += OnReady;

            InitializeComponent( );

            SetTabStopsForRootLevelObjects( );
            SetPropertiesForReadonlyFields( );
        }

        private void OnInitialized( object? sender, EventArgs e )
        {
            AddKeyBinding( Key.CtrlMask | Key.q, Command.QuitToplevel );
            quitMenuItem.Action = Application.Top.RequestStop;
            GlobalConfigurationSetFieldsFromSettingsObject( false );
        }

        private bool _eventsEnabled;

        private static readonly Logger Logger = LogManager.GetCurrentClassLogger( );

        private async void OnReady( )
        {
            ConfiguredTaskAwaitable zfsRefreshTask = RefreshZfsConfigurationTreeViewFromZfsAsync( ).ConfigureAwait( true );
            configCategoryTabView.SelectedTabChanged += ConfigCategoryTabViewOnSelectedTabChanged;
            InitializeTemplateEditorView( );
            InitializeZfsConfigurationView( );
            await zfsRefreshTask;
            EnableEventHandlers( );
        }

        private void ConfigCategoryTabViewOnSelectedTabChanged( object? sender, TabView.TabChangedEventArgs e )
        {
            e.NewTab.View.CanFocus = false;
            if ( e.NewTab.View.Text == "ZFS Configuration" )
            {
                zfsConfigurationTreeView.SetFocus( );
            }

            if ( e.NewTab.View.Text == "Templates" )
            {
                if ( templateConfigurationTemplateListView.Source.Count > 0 )
                {
                    templateConfigurationTemplateListView.SetFocus( );
                    templateConfigurationTemplateListView.SelectedItem = 0;
                }
            }
        }

        private void SetTabStopsForRootLevelObjects( )
        {
            configCategoryTabView.TabStop = false;
        }

        private void DisableEventHandlers( )
        {
            if ( !_eventsEnabled )
            {
                return;
            }

            DisableGlobalConfigTabEventHandlers( );
            DisableZfsConfigurationTabEventHandlers( );
            DisableTemplateConfigurationTabEventHandlers( );
            _eventsEnabled = false;
        }

        private void EnableEventHandlers( )
        {
            if ( _eventsEnabled )
            {
                return;
            }

            EnableGlobalConfigTabEventHandlers( );
            EnableTemplateConfigurationTabEventHandlers( );
            EnableZfsConfigurationTabEventHandlers( );
            _eventsEnabled = true;
        }
    }
}
