#nullable enable
// LICENSE:
// 
// This software is licensed for use under the Free Software Foundation's GPL v3.0 license, as retrieved
// from http://www.gnu.org/licenses/gpl-3.0.html on 2014-11-17.  A copy should also be available in this
// project's Git repository at https://github.com/jimsalterjrs/sanoid/blob/master/LICENSE.

//  <auto-generated>
//      This code was generated by:
//        TerminalGuiDesigner v1.0.24.0
//      You can make changes to this file and they will not be overwritten when saving.
//  </auto-generated>
// -----------------------------------------------------------------------------

using System.Text.Json;
using System.Text.Json.Serialization;
using Sanoid.Interop.Zfs.ZfsTypes;
using Sanoid.Settings.Settings;
using Terminal.Gui.Trees;

namespace Sanoid.ConfigConsole
{
    using System;

    using Terminal.Gui;

    public partial class SanoidConfigConsole
    {
        private SanoidZfsDataset? _zfsConfigurationCurrentSelectedItemOriginal;
        private SanoidZfsDataset? _zfsConfigurationCurrentSelectedItemModified;
        private List<string> _templateListItems = ConfigConsole.Settings!.Templates.Keys.ToList( );
        private bool _eventsEnabled;
        private static readonly Logger Logger = LogManager.GetCurrentClassLogger( );
        private readonly List<IZfsProperty> _modifiedPropertiesForZfsObject = new( );

        public SanoidConfigConsole( )
        {
            InitializeComponent( );

            quitMenuItem.Action = ( ) => Application.RequestStop( );

            SetGlobalSettingsFieldsFromSettingsObject( );
            configCategoryTabView.SelectedTabChanged += ConfigCategoryTabViewOnSelectedTabChanged;
            HideZfsConfigurationPropertyFrames( );
            SetTabStopsForRootLevelObjects( );
            SetCanFocusStateForZfsConfigurationViews( );
            SetTabStopsForZfsConfigurationWindow( );
            SetPropertiesForReadonlyFields( );
            UpdateZfsConfigurationButtonState( );

            EnableEventHandlers( );
        }

        private void UpdateZfsConfigurationButtonState( )
        {
            if ( zfsConfigurationTreeView.Objects.Any( ) && zfsConfigurationTreeView.SelectedObject?.Tag is SanoidZfsDataset )
            {
                zfsConfigurationResetCurrentButton.Enabled =
                    zfsConfigurationSaveCurrentButton.Enabled = _modifiedPropertiesForZfsObject.Any( );
            }
            else
            {
                zfsConfigurationResetCurrentButton.Enabled = false;
                zfsConfigurationSaveCurrentButton.Enabled = false;
            }
        }

        private void HideZfsConfigurationPropertyFrames( )
        {
            zfsConfigurationPropertiesFrame.Visible = false;
            zfsConfigurationSnapshotPropertiesFrame.Visible = false;
        }

        private void ShowZfsConfigurationPropertyFrames( )
        {
            zfsConfigurationPropertiesFrame.Visible = true;
            if ( _zfsConfigurationCurrentSelectedItemOriginal?.Kind == "snapshot" )
            {
                zfsConfigurationSnapshotPropertiesFrame.Visible = true;
            }
        }

        private void ConfigCategoryTabViewOnSelectedTabChanged( object? sender, TabView.TabChangedEventArgs e )
        {
            if ( e.NewTab.View.Text == "ZFS Configuration" )
            {
                zfsConfigurationTreeView.SetFocus( );
            }
        }

        private void SetTabStopsForRootLevelObjects( )
        {
            configCategoryTabView.TabStop = true;
            configCategoryTabView.CanFocus = true;
        }

        private void SetTabStopsForZfsConfigurationWindow( )
        {
            zfsConfigurationWindow.TabStop = true;
            zfsConfigurationTreeFrame.TabStop = true;
            zfsConfigurationPropertiesFrame.TabStop = true;
            zfsConfigurationCommonPropertiesFrame.TabStop = true;
            zfsConfigurationSnapshotPropertiesFrame.TabStop = true;
            zfsConfigurationActionsFrame.TabStop = true;
            zfsConfigurationPropertiesNameLabel.TabStop = false;
            zfsConfigurationPropertiesTypeLabel.TabStop = false;
            zfsConfigurationPropertiesEnabledLabel.TabStop = false;
            zfsConfigurationPropertiesEnabledSourceLabel.TabStop = false;
            zfsConfigurationPropertiesEnabledSourceTextField.TabStop = false;
            zfsConfigurationPropertiesTakeSnapshotsLabel.TabStop = false;
            zfsConfigurationPropertiesTakeSnapshotsSourceLabel.TabStop = false;
            zfsConfigurationPropertiesTakeSnapshotsSourceTextField.TabStop = false;
            zfsConfigurationPropertiesPruneSnapshotsLabel.TabStop = false;
            zfsConfigurationPropertiesPruneSnapshotsSourceLabel.TabStop = false;
            zfsConfigurationPropertiesPruneSnapshotsSourceTextField.TabStop = false;
            zfsConfigurationPropertiesTemplateLabel.TabStop = false;
            zfsConfigurationPropertiesTemplateSourceLabel.TabStop = false;
            zfsConfigurationPropertiesTemplateSourceTextField.TabStop = false;
            zfsConfigurationPropertiesRecursionLabel.TabStop = false;
            zfsConfigurationPropertiesRecursionSourceLabel.TabStop = false;
            zfsConfigurationPropertiesRecursionSourceTextField.TabStop = false;

            zfsConfigurationTreeView.TabStop = true;
            zfsConfigurationTreeView.TabIndex = 0;
            zfsConfigurationTreeView.CanFocus = true;

            zfsConfigurationPropertiesEnabledRadioGroup.TabStop = true;
            zfsConfigurationPropertiesEnabledRadioGroup.TabIndex = 1;
            zfsConfigurationPropertiesTakeSnapshotsRadioGroup.TabStop = true;
            zfsConfigurationPropertiesTakeSnapshotsRadioGroup.TabIndex = 2;
            zfsConfigurationPropertiesPruneSnapshotsRadioGroup.TabStop = true;
            zfsConfigurationPropertiesPruneSnapshotsRadioGroup.TabIndex = 3;
            zfsConfigurationPropertiesTemplateTextField.TabStop = true;
            zfsConfigurationPropertiesTemplateTextField.TabIndex = 4;
        }

        private void SetCanFocusStateForZfsConfigurationViews( )
        {
            zfsConfigurationTreeFrame.CanFocus = false;
            zfsConfigurationActionsFrame.CanFocus = false;
            zfsConfigurationPropertiesFrame.CanFocus = false;
            zfsConfigurationCommonPropertiesFrame.CanFocus = false;
            zfsConfigurationSnapshotPropertiesFrame.CanFocus = false;

            zfsConfigurationPropertiesRetentionFrequentTextField.Enabled = true;
            zfsConfigurationPropertiesRetentionFrequentTextField.CanFocus = true;
            zfsConfigurationPropertiesRetentionHourlyTextField.Enabled = true;
            zfsConfigurationPropertiesRetentionHourlyTextField.CanFocus = true;
            zfsConfigurationPropertiesRetentionDailyTextField.Enabled = true;
            zfsConfigurationPropertiesRetentionDailyTextField.CanFocus = true;
            zfsConfigurationPropertiesRetentionWeeklyTextField.Enabled = true;
            zfsConfigurationPropertiesRetentionWeeklyTextField.CanFocus = true;
            zfsConfigurationPropertiesRetentionMonthlyTextField.Enabled = true;
            zfsConfigurationPropertiesRetentionMonthlyTextField.CanFocus = true;
            zfsConfigurationPropertiesRetentionYearlyTextField.Enabled = true;
            zfsConfigurationPropertiesRetentionYearlyTextField.CanFocus = true;
        }

        private void SetPropertiesForReadonlyFields( )
        {
            zfsConfigurationPropertiesNameTextField.ReadOnly = true;
            zfsConfigurationPropertiesNameTextField.CanFocus = false;
            zfsConfigurationPropertiesTypeTextField.ReadOnly = true;
            zfsConfigurationPropertiesTypeTextField.CanFocus = false;
            zfsConfigurationPropertiesEnabledSourceTextField.ReadOnly = true;
            zfsConfigurationPropertiesEnabledSourceTextField.CanFocus = false;
            zfsConfigurationPropertiesTakeSnapshotsSourceTextField.ReadOnly = true;
            zfsConfigurationPropertiesTakeSnapshotsSourceTextField.CanFocus = false;
            zfsConfigurationPropertiesPruneSnapshotsSourceTextField.ReadOnly = true;
            zfsConfigurationPropertiesPruneSnapshotsSourceTextField.CanFocus = false;
            zfsConfigurationPropertiesTemplateSourceTextField.ReadOnly = true;
            zfsConfigurationPropertiesTemplateSourceTextField.CanFocus = false;
            zfsConfigurationPropertiesRecursionSourceTextField.ReadOnly = true;
            zfsConfigurationPropertiesRecursionSourceTextField.CanFocus = false;

            zfsConfigurationPropertiesRecentFrequentTextField.CanFocus = false;
            zfsConfigurationPropertiesRecentFrequentTextField.ReadOnly = true;
            zfsConfigurationPropertiesRecentHourlyTextField.CanFocus = false;
            zfsConfigurationPropertiesRecentHourlyTextField.ReadOnly = true;
            zfsConfigurationPropertiesRecentDailyTextField.CanFocus = false;
            zfsConfigurationPropertiesRecentDailyTextField.ReadOnly = true;
            zfsConfigurationPropertiesRecentWeeklyTextField.CanFocus = false;
            zfsConfigurationPropertiesRecentWeeklyTextField.ReadOnly = true;
            zfsConfigurationPropertiesRecentMonthlyTextField.CanFocus = false;
            zfsConfigurationPropertiesRecentMonthlyTextField.ReadOnly = true;
            zfsConfigurationPropertiesRecentYearlyTextField.CanFocus = false;
            zfsConfigurationPropertiesRecentYearlyTextField.ReadOnly = true;
        }

        private void DisableEventHandlers( )
        {
            if ( !_eventsEnabled )
            {
                return;
            }

            Logger.Debug( "Disabling event handlers for zfs configuration fields" );
            resetGlobalConfigButton.Clicked -= SetGlobalSettingsFieldsFromSettingsObject;
            saveGlobalConfigButton.Clicked -= ShowSaveGlobalConfigDialog;
            zfsConfigurationRefreshButton.Clicked -= RefreshZfsConfigurationTreeViewFromZfs;
            zfsConfigurationResetCurrentButton.Clicked -= ZfsConfigurationResetCurrentButtonOnClicked;
            zfsConfigurationTreeView.SelectionChanged -= ZfsConfigurationTreeViewOnSelectionChanged;
            zfsConfigurationPropertiesEnabledRadioGroup.SelectedItemChanged -= ZfsConfigurationPropertiesEnabledRadioGroup_SelectedItemChanged;
            zfsConfigurationPropertiesEnabledRadioGroup.MouseClick -= ZfsConfigurationPropertiesEnabledRadioGroupOnMouseClick;
            zfsConfigurationPropertiesTakeSnapshotsRadioGroup.SelectedItemChanged -= ZfsConfigurationPropertiesTakeSnapshotsRadioGroup_SelectedItemChanged;
            zfsConfigurationPropertiesTakeSnapshotsRadioGroup.MouseClick -= ZfsConfigurationPropertiesTakeSnapshotsRadioGroupOnMouseClick;
            zfsConfigurationPropertiesPruneSnapshotsRadioGroup.SelectedItemChanged -= ZfsConfigurationPropertiesPruneSnapshotsRadioGroup_SelectedItemChanged;
            zfsConfigurationPropertiesPruneSnapshotsRadioGroup.MouseClick -= ZfsConfigurationPropertiesPruneSnapshotsRadioGroupOnMouseClick;
            zfsConfigurationPropertiesRecursionRadioGroup.SelectedItemChanged -= ZfsConfigurationPropertiesRecursionRadioGroup_SelectedItemChanged;
            zfsConfigurationPropertiesRecursionRadioGroup.MouseClick -= ZfsConfigurationPropertiesRecursionRadioGroupOnMouseClick;
            zfsConfigurationPropertiesTemplateTextField.Leave -= ZfsConfigurationPropertiesTemplateTextFieldOnLeave;
            zfsConfigurationSaveCurrentButton.Clicked -= ZfsConfigurationSaveCurrentButtonOnClicked;
            _eventsEnabled = false;
            Logger.Debug( "Event handlers for zfs configuration fields disabled" );
        }

        private void ZfsConfigurationPropertiesTemplateTextFieldOnLeave( FocusEventArgs args )
        {
            ArgumentNullException.ThrowIfNull( args, nameof( args ) );

            UpdateSelectedItemTemplateProperty( );
            UpdateZfsConfigurationButtonState( );
        }

        private void ZfsConfigurationPropertiesRecursionRadioGroupOnMouseClick( MouseEventArgs args )
        {
            ArgumentNullException.ThrowIfNull( args, nameof( args ) );

            UpdateSelectedItemRecursionProperty( );
            UpdateZfsConfigurationButtonState( );
        }

        private void ZfsConfigurationPropertiesRecursionRadioGroup_SelectedItemChanged( SelectedItemChangedArgs args )
        {
            ArgumentNullException.ThrowIfNull( args, nameof( args ) );

            UpdateSelectedItemRecursionProperty( );
            UpdateZfsConfigurationButtonState( );
        }

        private void EnableEventHandlers( )
        {
            if ( _eventsEnabled )
            {
                return;
            }

            Logger.Debug( "Enabling event handlers for zfs configuration fields" );
            resetGlobalConfigButton.Clicked += SetGlobalSettingsFieldsFromSettingsObject;
            saveGlobalConfigButton.Clicked += ShowSaveGlobalConfigDialog;
            zfsConfigurationRefreshButton.Clicked += RefreshZfsConfigurationTreeViewFromZfs;
            zfsConfigurationResetCurrentButton.Clicked += ZfsConfigurationResetCurrentButtonOnClicked;
            zfsConfigurationTreeView.SelectionChanged += ZfsConfigurationTreeViewOnSelectionChanged;
            zfsConfigurationPropertiesEnabledRadioGroup.SelectedItemChanged += ZfsConfigurationPropertiesEnabledRadioGroup_SelectedItemChanged;
            zfsConfigurationPropertiesEnabledRadioGroup.MouseClick += ZfsConfigurationPropertiesEnabledRadioGroupOnMouseClick;
            zfsConfigurationPropertiesTakeSnapshotsRadioGroup.SelectedItemChanged += ZfsConfigurationPropertiesTakeSnapshotsRadioGroup_SelectedItemChanged;
            zfsConfigurationPropertiesTakeSnapshotsRadioGroup.MouseClick += ZfsConfigurationPropertiesTakeSnapshotsRadioGroupOnMouseClick;
            zfsConfigurationPropertiesPruneSnapshotsRadioGroup.SelectedItemChanged += ZfsConfigurationPropertiesPruneSnapshotsRadioGroup_SelectedItemChanged;
            zfsConfigurationPropertiesPruneSnapshotsRadioGroup.MouseClick += ZfsConfigurationPropertiesPruneSnapshotsRadioGroupOnMouseClick;
            zfsConfigurationPropertiesRecursionRadioGroup.SelectedItemChanged += ZfsConfigurationPropertiesRecursionRadioGroup_SelectedItemChanged;
            zfsConfigurationPropertiesRecursionRadioGroup.MouseClick += ZfsConfigurationPropertiesRecursionRadioGroupOnMouseClick;
            zfsConfigurationPropertiesTemplateTextField.Leave += ZfsConfigurationPropertiesTemplateTextFieldOnLeave;
            zfsConfigurationSaveCurrentButton.Clicked += ZfsConfigurationSaveCurrentButtonOnClicked;
            _eventsEnabled = true;
            Logger.Debug( "Event handlers for zfs configuration fields enabled" );
        }

        private void ZfsConfigurationResetCurrentButtonOnClicked( )
        {
            DisableEventHandlers( );
            ClearAllZfsPropertyFields( );
            UpdateZfsCommonPropertyFieldsFromSanoidZfsDataset( (SanoidZfsDataset)zfsConfigurationTreeView.SelectedObject.Tag, false );
            _modifiedPropertiesForZfsObject.Clear( );
            UpdateZfsConfigurationButtonState( );
            EnableEventHandlers( );
        }

        private void ZfsConfigurationSaveCurrentButtonOnClicked( )
        {
            if ( ValidateZfsObjectConfigValues( ) && _modifiedPropertiesForZfsObject.Count > 0 && _zfsConfigurationCurrentSelectedItemOriginal is not null && _zfsConfigurationCurrentSelectedItemModified is not null )
            {
                // The buttons are disposable, but the Dialog will dispose them when it is closed
                Button cancelButton = new( "Cancel", true );
                Button saveButton = new( "Save" );
                using Dialog saveZfsObjectDialog = new( "Confirm Saving ZFS Object Configuration", 80, 7, cancelButton, saveButton );
                bool saveConfirmed = false;
                string zfsObjectPath = _zfsConfigurationCurrentSelectedItemOriginal.Name;

                cancelButton.Clicked += OnCancelButtonOnClicked;
                saveButton.Clicked += OnSaveButtonOnClicked;

                saveZfsObjectDialog.ButtonAlignment = Dialog.ButtonAlignments.Center;
                saveZfsObjectDialog.AutoSize = true;
                saveZfsObjectDialog.ColorScheme = whiteOnRed;
                saveZfsObjectDialog.TextAlignment = TextAlignment.Centered;
                saveZfsObjectDialog.VerticalTextAlignment = VerticalTextAlignment.Middle;
                saveZfsObjectDialog.Text = $"The following command will be executed:\nzfs set {_modifiedPropertiesForZfsObject.ToStringForZfsSet( )} {zfsObjectPath}\n\nTHIS OPERATION CANNOT BE UNDONE";
                saveZfsObjectDialog.Modal = true;

                Application.Run( saveZfsObjectDialog );

                if ( saveConfirmed )
                {
                    if ( ConfigConsole.Settings != null && ConfigConsole.CommandRunner != null )
                    {
                        if ( ZfsTasks.SetPropertiesForDataset( ConfigConsole.Settings.DryRun, zfsObjectPath, _modifiedPropertiesForZfsObject, ConfigConsole.CommandRunner ) || ConfigConsole.Settings.DryRun )
                        {
                            _modifiedPropertiesForZfsObject.Clear( );
                            zfsConfigurationTreeView.SelectedObject.Tag = _zfsConfigurationCurrentSelectedItemOriginal = _zfsConfigurationCurrentSelectedItemModified;
                            if ( !ReferenceEquals( zfsConfigurationTreeView.SelectedObject, _zfsConfigurationCurrentSelectedItemOriginal.ConfigConsoleTreeNode ) )
                            {
                                ( (SanoidZfsDataset)zfsConfigurationTreeView.SelectedObject.Tag ).ConfigConsoleTreeNode = (TreeNode)zfsConfigurationTreeView.SelectedObject;
                            }

                            zfsConfigurationTreeView.RefreshObject( zfsConfigurationTreeView.SelectedObject );
                        }
                    }

                    Logger.Info( "Saving {0}", zfsObjectPath );
                }

                // Fine to ignore this warning here, because we are explicitly un-wiring the events before any disposal will occur.
                // The button click handlers are un-subscribed and THEN the dialog is asked to exit.
                // ReSharper disable AccessToDisposedClosure
                void OnCancelButtonOnClicked( )
                {
                    cancelButton.Clicked -= OnCancelButtonOnClicked;
                    saveButton.Clicked -= OnSaveButtonOnClicked;
                    RequestStop( saveZfsObjectDialog );
                }

                void OnSaveButtonOnClicked( )
                {
                    saveConfirmed = true;
                    cancelButton.Clicked -= OnCancelButtonOnClicked;
                    saveButton.Clicked -= OnSaveButtonOnClicked;
                    RequestStop( saveZfsObjectDialog );
                }
                // ReSharper restore AccessToDisposedClosure
            }
        }

        private bool ValidateZfsObjectConfigValues( )
        {
            return true;
        }

        private void ZfsConfigurationPropertiesEnabledRadioGroupOnMouseClick( MouseEventArgs args )
        {
            ArgumentNullException.ThrowIfNull( args, nameof( args ) );

            UpdateSelectedItemEnabledProperty( );
            UpdateZfsConfigurationButtonState( );
        }

        private void UpdateSelectedItemEnabledProperty( )
        {
            zfsConfigurationPropertiesEnabledSourceTextField.Text = "local";
            _modifiedPropertiesForZfsObject.RemoveAll( p => p.Name == ZfsPropertyNames.EnabledPropertyName );
            ZfsProperty<bool> newProperty = _zfsConfigurationCurrentSelectedItemModified!.UpdateProperty( ZfsPropertyNames.EnabledPropertyName, zfsConfigurationPropertiesEnabledRadioGroup.SelectedItem == 0, "local" );
            _modifiedPropertiesForZfsObject.Add( newProperty );
        }

        private void UpdateSelectedItemTakeSnapshotsProperty( )
        {
            zfsConfigurationPropertiesTakeSnapshotsSourceTextField.Text = "local";
            _modifiedPropertiesForZfsObject.RemoveAll( p => p.Name == ZfsPropertyNames.TakeSnapshotsPropertyName );
            ZfsProperty<bool> newProperty = _zfsConfigurationCurrentSelectedItemModified!.UpdateProperty( ZfsPropertyNames.TakeSnapshotsPropertyName, zfsConfigurationPropertiesTakeSnapshotsRadioGroup.SelectedItem == 0, "local" );
            _modifiedPropertiesForZfsObject.Add( newProperty );
        }

        private void UpdateSelectedItemPruneSnapshotsProperty( )
        {
            zfsConfigurationPropertiesPruneSnapshotsSourceTextField.Text = "local";
            _modifiedPropertiesForZfsObject.RemoveAll( p => p.Name == ZfsPropertyNames.PruneSnapshotsPropertyName );
            ZfsProperty<bool> newProperty = _zfsConfigurationCurrentSelectedItemModified!.UpdateProperty( ZfsPropertyNames.PruneSnapshotsPropertyName, zfsConfigurationPropertiesPruneSnapshotsRadioGroup.SelectedItem == 0, "local" );
            _modifiedPropertiesForZfsObject.Add( newProperty );
        }

        private void UpdateSelectedItemRecursionProperty( )
        {
            zfsConfigurationPropertiesRecursionSourceTextField.Text = "local";
            _modifiedPropertiesForZfsObject.RemoveAll( p => p.Name == ZfsPropertyNames.RecursionPropertyName );
            ZfsProperty<bool> newProperty = _zfsConfigurationCurrentSelectedItemModified!.UpdateProperty( ZfsPropertyNames.RecursionPropertyName, zfsConfigurationPropertiesRecursionRadioGroup.SelectedItem == 0, "local" );
            _modifiedPropertiesForZfsObject.Add( newProperty );
        }

        private void UpdateSelectedItemTemplateProperty( )
        {
            if ( zfsConfigurationPropertiesTemplateTextField.Text?.ToString( ) is not { } templateName || string.IsNullOrWhiteSpace( templateName ) )
            {
                return;
            }

            zfsConfigurationPropertiesTemplateSourceTextField.Text = "local";
            _modifiedPropertiesForZfsObject.RemoveAll( p => p.Name == ZfsPropertyNames.TemplatePropertyName );
            ZfsProperty<string> newProperty = (ZfsProperty<string>)_zfsConfigurationCurrentSelectedItemModified!.UpdateProperty( ZfsPropertyNames.TemplatePropertyName, templateName, "local" );
            _modifiedPropertiesForZfsObject.Add( newProperty );
        }

        private void ZfsConfigurationPropertiesEnabledRadioGroup_SelectedItemChanged( SelectedItemChangedArgs args )
        {
            ArgumentNullException.ThrowIfNull( args, nameof( args ) );

            UpdateSelectedItemEnabledProperty( );
            UpdateZfsConfigurationButtonState( );
        }

        private void ZfsConfigurationPropertiesTakeSnapshotsRadioGroupOnMouseClick( MouseEventArgs args )
        {
            ArgumentNullException.ThrowIfNull( args, nameof( args ) );

            UpdateSelectedItemTakeSnapshotsProperty( );
            UpdateZfsConfigurationButtonState( );
        }

        private void ZfsConfigurationPropertiesTakeSnapshotsRadioGroup_SelectedItemChanged( SelectedItemChangedArgs args )
        {
            ArgumentNullException.ThrowIfNull( args, nameof( args ) );

            UpdateSelectedItemTakeSnapshotsProperty( );
            UpdateZfsConfigurationButtonState( );
        }

        private void ZfsConfigurationPropertiesPruneSnapshotsRadioGroupOnMouseClick( MouseEventArgs args )
        {
            ArgumentNullException.ThrowIfNull( args, nameof( args ) );

            UpdateSelectedItemPruneSnapshotsProperty( );
            UpdateZfsConfigurationButtonState( );
        }

        private void ZfsConfigurationPropertiesPruneSnapshotsRadioGroup_SelectedItemChanged( SelectedItemChangedArgs args )
        {
            ArgumentNullException.ThrowIfNull( args, nameof( args ) );

            UpdateSelectedItemPruneSnapshotsProperty( );
            UpdateZfsConfigurationButtonState( );
        }

        private void ZfsConfigurationTreeViewOnSelectionChanged( object? sender, SelectionChangedEventArgs<ITreeNode> e )
        {
            DisableEventHandlers( );
            ArgumentNullException.ThrowIfNull( sender );

            ClearAllZfsPropertyFields( );
            _modifiedPropertiesForZfsObject.Clear( );

            if ( e.NewValue.Tag is SanoidZfsDataset ds )
            {
                _zfsConfigurationCurrentSelectedItemOriginal = ds with { };
                _zfsConfigurationCurrentSelectedItemModified = ds with { };
                UpdateZfsCommonPropertyFieldsFromSanoidZfsDataset( _zfsConfigurationCurrentSelectedItemOriginal, false );
            }

            UpdateZfsConfigurationButtonState( );

            EnableEventHandlers( );
        }

        private void ClearAllZfsPropertyFields( bool manageEventHandlers = false )
        {
            if ( manageEventHandlers )
            {
                DisableEventHandlers( );
            }

            zfsConfigurationPropertiesNameTextField.Clear( );
            zfsConfigurationPropertiesTypeTextField.Clear( );
            zfsConfigurationPropertiesEnabledRadioGroup.Clear( );
            zfsConfigurationPropertiesEnabledSourceTextField.Clear( );
            zfsConfigurationPropertiesTakeSnapshotsRadioGroup.Clear( );
            zfsConfigurationPropertiesTakeSnapshotsSourceTextField.Clear( );
            zfsConfigurationPropertiesPruneSnapshotsRadioGroup.Clear( );
            zfsConfigurationPropertiesPruneSnapshotsSourceTextField.Clear( );
            zfsConfigurationPropertiesRecursionRadioGroup.Clear( );
            zfsConfigurationPropertiesRecursionSourceTextField.Clear( );
            zfsConfigurationPropertiesTemplateTextField.Clear( );
            zfsConfigurationPropertiesTemplateSourceTextField.Clear( );

            if ( manageEventHandlers )
            {
                EnableEventHandlers( );
            }
        }

        private void UpdateZfsCommonPropertyFieldsFromSanoidZfsDataset( SanoidZfsDataset ds, bool manageEventHandlers = true )
        {
            if ( manageEventHandlers )
            {
                DisableEventHandlers( );
            }

            ShowZfsConfigurationPropertyFrames( );
            zfsConfigurationPropertiesNameTextField.Text = ds.Name;
            zfsConfigurationPropertiesTypeTextField.Text = ds.Kind;
            zfsConfigurationPropertiesEnabledRadioGroup.SelectedItem = ds.Enabled.AsTrueFalseRadioIndex( );
            zfsConfigurationPropertiesEnabledRadioGroup.ColorScheme = ds.Enabled.IsInherited ? inheritedPropertyRadioGroupColorScheme : localPropertyRadioGroupColorScheme;
            zfsConfigurationPropertiesEnabledSourceTextField.Text = ds.Enabled.InheritedFrom;
            zfsConfigurationPropertiesTakeSnapshotsRadioGroup.SelectedItem = ds.TakeSnapshots.AsTrueFalseRadioIndex( );
            zfsConfigurationPropertiesTakeSnapshotsRadioGroup.ColorScheme = ds.TakeSnapshots.IsInherited ? inheritedPropertyRadioGroupColorScheme : localPropertyRadioGroupColorScheme;
            zfsConfigurationPropertiesTakeSnapshotsSourceTextField.Text = ds.TakeSnapshots.InheritedFrom;
            zfsConfigurationPropertiesPruneSnapshotsRadioGroup.SelectedItem = ds.PruneSnapshots.AsTrueFalseRadioIndex( );
            zfsConfigurationPropertiesPruneSnapshotsRadioGroup.ColorScheme = ds.PruneSnapshots.IsInherited ? inheritedPropertyRadioGroupColorScheme : localPropertyRadioGroupColorScheme;
            zfsConfigurationPropertiesPruneSnapshotsSourceTextField.Text = ds.PruneSnapshots.InheritedFrom;
            zfsConfigurationPropertiesRecursionRadioGroup.SelectedItem = ds.Recursion.Value switch { "sanoid" => 0, "zfs" => 1, _ => throw new InvalidOperationException( "Invalid recursion value" ) };
            zfsConfigurationPropertiesRecursionRadioGroup.ColorScheme = ds.Recursion.IsInherited ? inheritedPropertyRadioGroupColorScheme : localPropertyRadioGroupColorScheme;
            zfsConfigurationPropertiesRecursionSourceTextField.Text = ds.Recursion.InheritedFrom;
            zfsConfigurationPropertiesTemplateTextField.Text = ds.Template.Value;
            zfsConfigurationPropertiesTemplateTextField.ColorScheme = ds.Template.IsInherited ? inheritedPropertyTextFieldColorScheme : localPropertyTextFieldColorScheme;
            zfsConfigurationPropertiesTemplateSourceTextField.Text = ds.Template.InheritedFrom;

            zfsConfigurationPropertiesRetentionFrequentTextField.Text = ds.SnapshotRetentionFrequent.Value.ToString( );
            zfsConfigurationPropertiesRetentionFrequentTextField.ColorScheme = ds.SnapshotRetentionFrequent.IsInherited ? inheritedPropertyTextFieldColorScheme : localPropertyTextFieldColorScheme;
            zfsConfigurationPropertiesRetentionHourlyTextField.Text = ds.SnapshotRetentionHourly.Value.ToString( );
            zfsConfigurationPropertiesRetentionHourlyTextField.ColorScheme = ds.SnapshotRetentionHourly.IsInherited ? inheritedPropertyTextFieldColorScheme : localPropertyTextFieldColorScheme;
            zfsConfigurationPropertiesRetentionDailyTextField.Text = ds.SnapshotRetentionDaily.Value.ToString( );
            zfsConfigurationPropertiesRetentionDailyTextField.ColorScheme = ds.SnapshotRetentionDaily.IsInherited ? inheritedPropertyTextFieldColorScheme : localPropertyTextFieldColorScheme;
            zfsConfigurationPropertiesRetentionWeeklyTextField.Text = ds.SnapshotRetentionWeekly.Value.ToString( );
            zfsConfigurationPropertiesRetentionWeeklyTextField.ColorScheme = ds.SnapshotRetentionWeekly.IsInherited ? inheritedPropertyTextFieldColorScheme : localPropertyTextFieldColorScheme;
            zfsConfigurationPropertiesRetentionMonthlyTextField.Text = ds.SnapshotRetentionMonthly.Value.ToString( );
            zfsConfigurationPropertiesRetentionMonthlyTextField.ColorScheme = ds.SnapshotRetentionMonthly.IsInherited ? inheritedPropertyTextFieldColorScheme : localPropertyTextFieldColorScheme;
            zfsConfigurationPropertiesRetentionYearlyTextField.Text = ds.SnapshotRetentionYearly.Value.ToString( );
            zfsConfigurationPropertiesRetentionYearlyTextField.ColorScheme = ds.SnapshotRetentionYearly.IsInherited ? inheritedPropertyTextFieldColorScheme : localPropertyTextFieldColorScheme;

            zfsConfigurationPropertiesRecentFrequentTextField.Text = ds.LastFrequentSnapshotTimestamp.IsLocal ? ds.LastFrequentSnapshotTimestamp.Value.ToString( "O" ) : string.Empty;
            zfsConfigurationPropertiesRecentHourlyTextField.Text = ds.LastHourlySnapshotTimestamp.IsLocal ? ds.LastHourlySnapshotTimestamp.Value.ToString( "O" ) : string.Empty;
            zfsConfigurationPropertiesRecentDailyTextField.Text = ds.LastDailySnapshotTimestamp.IsLocal ? ds.LastDailySnapshotTimestamp.Value.ToString( "O" ) : string.Empty;
            zfsConfigurationPropertiesRecentWeeklyTextField.Text = ds.LastWeeklySnapshotTimestamp.IsLocal ? ds.LastWeeklySnapshotTimestamp.Value.ToString( "O" ) : string.Empty;
            zfsConfigurationPropertiesRecentMonthlyTextField.Text = ds.LastMonthlySnapshotTimestamp.IsLocal ? ds.LastMonthlySnapshotTimestamp.Value.ToString( "O" ) : string.Empty;
            zfsConfigurationPropertiesRecentYearlyTextField.Text = ds.LastYearlySnapshotTimestamp.IsLocal ? ds.LastYearlySnapshotTimestamp.Value.ToString( "O" ) : string.Empty;

            if ( manageEventHandlers )
            {
                EnableEventHandlers( );
            }
        }

        private async void RefreshZfsConfigurationTreeViewFromZfs( )
        {
            Logger.Debug( "Refreshing zfs configuration tree view" );
            DisableEventHandlers( );
            try
            {
                HideZfsConfigurationPropertyFrames( );
                Logger.Debug( "Clearing objects from zfs configuration tree view" );
                zfsConfigurationTreeView.ClearObjects( );
                ConfigConsole.Snapshots.Clear( );
                ConfigConsole.Datasets.Clear( );
                _modifiedPropertiesForZfsObject.Clear( );
                _zfsConfigurationCurrentSelectedItemOriginal = null;
                _zfsConfigurationCurrentSelectedItemModified = null;
                Logger.Debug( "Getting zfs objects from zfs and populating configuration tree view" );
                zfsConfigurationTreeView.AddObjects( await ZfsTasks.GetFullZfsConfigurationTreeAsync( ConfigConsole.Datasets, ConfigConsole.Snapshots, ConfigConsole.CommandRunner! ).ConfigureAwait( true ) );
                UpdateZfsConfigurationButtonState( );
                zfsConfigurationTreeView.SetFocus( );
            }
            catch ( Exception e )
            {
                Logger.Error( e, "Error getting ZFS configuration tree" );
            }

            EnableEventHandlers( );
            Logger.Debug( "Finished refreshing zfs configuration tree view" );
        }

        private void ShowSaveGlobalConfigDialog( )
        {
            if ( ValidateGlobalConfigValues( ) )
            {
                using ( SaveDialog globalConfigSaveDialog = new( "Save GLobal Configuration", "Select file to save global configuration", new( ) { ".json" } ) )
                {
                    globalConfigSaveDialog.AllowsOtherFileTypes = true;
                    globalConfigSaveDialog.CanCreateDirectories = true;
                    globalConfigSaveDialog.Modal = true;
                    Application.Run( globalConfigSaveDialog );
                    if ( globalConfigSaveDialog.Canceled )
                    {
                        return;
                    }

                    if ( globalConfigSaveDialog.FileName.IsEmpty )
                    {
                        return;
                    }

                    SanoidSettings? settings = ConfigConsole.Settings;
                    settings!.DryRun = dryRunRadioGroup.SelectedItem == 0;
                    settings.TakeSnapshots = takeSnapshotsRadioGroup.SelectedItem == 0;
                    settings.PruneSnapshots = pruneSnapshotsRadioGroup.SelectedItem == 0;
                    settings.ZfsPath = pathToZfsTextField.Text?.ToString( ) ?? string.Empty;
                    settings.ZpoolPath = pathToZpoolTextField.Text?.ToString( ) ?? string.Empty;
                    settings.Formatting.ComponentSeparator = snapshotNameComponentSeparatorValidatorField.Text?.ToString( ) ?? string.Empty;
                    settings.Formatting.Prefix = snapshotNamePrefixTextField.Text?.ToString( ) ?? string.Empty;
                    settings.Formatting.TimestampFormatString = snapshotNameTimestampFormatTextField.Text?.ToString( ) ?? string.Empty;
                    settings.Formatting.FrequentSuffix = snapshotNameFrequentSuffixTextField.Text?.ToString( ) ?? string.Empty;
                    settings.Formatting.HourlySuffix = snapshotNameHourlySuffixTextField.Text?.ToString( ) ?? string.Empty;
                    settings.Formatting.DailySuffix = snapshotNameDailySuffixTextField.Text?.ToString( ) ?? string.Empty;
                    settings.Formatting.WeeklySuffix = snapshotNameWeeklySuffixTextField.Text?.ToString( ) ?? string.Empty;
                    settings.Formatting.MonthlySuffix = snapshotNameMonthlySuffixTextField.Text?.ToString( ) ?? string.Empty;
                    settings.Formatting.YearlySuffix = snapshotNameYearlySuffixTextField.Text.ToString( ) ?? throw new InvalidOperationException( );

                    File.WriteAllText( globalConfigSaveDialog.FileName.ToString( ) ?? throw new InvalidOperationException( "Null string provided for save file name" ), JsonSerializer.Serialize( ConfigConsole.Settings, new JsonSerializerOptions { WriteIndented = true, DefaultIgnoreCondition = JsonIgnoreCondition.Never } ) );
                }
            }
        }

        private bool ValidateGlobalConfigValues( )
        {
            if ( pathToZfsTextField.Text.IsEmpty )
            {
                return false;
            }

            return true;
        }

        private void SetGlobalSettingsFieldsFromSettingsObject( )
        {
            DisableEventHandlers( );

            Logger.Debug( "Setting global configuration fields to values in settings" );

            dryRunRadioGroup.SelectedItem = ConfigConsole.Settings!.DryRun ? 0 : 1;
            takeSnapshotsRadioGroup.SelectedItem = ConfigConsole.Settings.TakeSnapshots ? 0 : 1;
            pruneSnapshotsRadioGroup.SelectedItem = ConfigConsole.Settings.PruneSnapshots ? 0 : 1;
            pathToZfsTextField.Text = ConfigConsole.Settings.ZfsPath;
            pathToZpoolTextField.Text = ConfigConsole.Settings.ZpoolPath;
            snapshotNameComponentSeparatorValidatorField.Text = ConfigConsole.Settings.Formatting.ComponentSeparator;
            snapshotNamePrefixTextField.Text = ConfigConsole.Settings.Formatting.Prefix;
            snapshotNameTimestampFormatTextField.Text = ConfigConsole.Settings.Formatting.TimestampFormatString;
            snapshotNameFrequentSuffixTextField.Text = ConfigConsole.Settings.Formatting.FrequentSuffix;
            snapshotNameHourlySuffixTextField.Text = ConfigConsole.Settings.Formatting.HourlySuffix;
            snapshotNameDailySuffixTextField.Text = ConfigConsole.Settings.Formatting.DailySuffix;
            snapshotNameWeeklySuffixTextField.Text = ConfigConsole.Settings.Formatting.WeeklySuffix;
            snapshotNameMonthlySuffixTextField.Text = ConfigConsole.Settings.Formatting.MonthlySuffix;
            snapshotNameYearlySuffixTextField.Text = ConfigConsole.Settings.Formatting.YearlySuffix;

            Logger.Debug( "Finished etting global configuration fields to values in settings" );
            EnableEventHandlers( );
        }
    }
}
