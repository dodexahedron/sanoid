// LICENSE:
// 
// This software is licensed for use under the Free Software Foundation's GPL v3.0 license, as retrieved
// from http://www.gnu.org/licenses/gpl-3.0.html on 2014-11-17.  A copy should also be available in this
// project's Git repository at https://github.com/jimsalterjrs/sanoid/blob/master/LICENSE.

#nullable enable

//  <auto-generated>
//      This code was generated by:
//        TerminalGuiDesigner v1.0.24.0
//      You can make changes to this file and they will not be overwritten when saving.
//  </auto-generated>
// -----------------------------------------------------------------------------

namespace Sanoid.ConfigConsole
{
    using System;
    using Terminal.Gui;

    public partial class SanoidConfigConsole
    {
        public SanoidConfigConsole( )
        {
            InitializeComponent( );

            quitMenuItem.Action = ( ) => Application.RequestStop( );

            SetGlobalSettingsFieldsFromSettingsObject( false );
            configCategoryTabView.SelectedTabChanged += ConfigCategoryTabViewOnSelectedTabChanged;
            HideZfsConfigurationPropertyFrames( );
            HideTemplateConfigurationPropertiesFrame( );
            SetTabStopsForRootLevelObjects( );
            SetCanFocusStateForZfsConfigurationViews( );
            SetTabStopsForZfsConfigurationWindow( );
            SetPropertiesForReadonlyFields( );
            SetTagsForZfsPropertyFields( );
            UpdateZfsConfigurationButtonState( );
            PopulateTemplatesListViewsWithStandardOptions();

            EnableEventHandlers( );
        }

        private bool _eventsEnabled;

        private static readonly Logger Logger = LogManager.GetCurrentClassLogger( );

        private void ConfigCategoryTabViewOnSelectedTabChanged( object? sender, TabView.TabChangedEventArgs e )
        {
            if ( e.NewTab.View.Text == "ZFS Configuration" )
            {
                zfsConfigurationTreeView.SetFocus( );
            }
            if ( e.NewTab.View.Text == "Templates" )
            {
                if ( templateConfigurationTemplateListView.Source.Count > 0 )
                {
                    templateConfigurationTemplateListView.SetFocus( );
                    templateConfigurationTemplateListView.SelectedItem = 0;
                }
            }
        }

        private void SetTabStopsForRootLevelObjects( )
        {
            configCategoryTabView.TabStop = true;
            configCategoryTabView.CanFocus = true;
        }

        private void DisableEventHandlers( )
        {
            if ( !_eventsEnabled )
            {
                return;
            }

            Logger.Debug( "Disabling event handlers for zfs configuration fields" );
            resetGlobalConfigButton.Clicked -= ResetGlobalConfigButtonOnClicked;
            saveGlobalConfigButton.Clicked -= ShowSaveGlobalConfigDialog;
            DisableZfsConfigurationTabEventHandlers( );
            DisableTemplateConfigurationTabEventHandlers( );
            _eventsEnabled = false;
            Logger.Debug( "Event handlers for zfs configuration fields disabled" );
        }

        private void EnableEventHandlers( )
        {
            if ( _eventsEnabled )
            {
                return;
            }

            Logger.Debug( "Enabling event handlers for zfs configuration fields" );
            resetGlobalConfigButton.Clicked += ResetGlobalConfigButtonOnClicked;
            saveGlobalConfigButton.Clicked += ShowSaveGlobalConfigDialog;
            EnableTemplateConfigurationTabEventHandlers();
            EnableZfsConfigurationTabEventHandlers( );
            _eventsEnabled = true;
            Logger.Debug( "Event handlers for zfs configuration fields enabled" );
        }

        private bool ValidateGlobalConfigValues( )
        {
            if ( pathToZfsTextField.Text.IsEmpty || pathToZpoolTextField.Text.IsEmpty )
            {
                return false;
            }

            if ( Environment.OSVersion.Platform == PlatformID.Unix && !File.Exists( pathToZfsTextField.Text.ToString( ) ) || !File.Exists( pathToZpoolTextField.Text.ToString( ) ) )
            {
                return false;
            }

            return true;
        }

        private void ResetGlobalConfigButtonOnClicked( )
        {
            SetGlobalSettingsFieldsFromSettingsObject( );
        }

        private void SetGlobalSettingsFieldsFromSettingsObject( bool manageEventHandlers = true )
        {
            if ( manageEventHandlers )
            {
                DisableEventHandlers( );
            }

            Logger.Debug( "Setting global configuration fields to values in settings" );

            dryRunRadioGroup.SelectedItem = ConfigConsole.Settings.DryRun ? 0 : 1;
            takeSnapshotsRadioGroup.SelectedItem = ConfigConsole.Settings.TakeSnapshots ? 0 : 1;
            pruneSnapshotsRadioGroup.SelectedItem = ConfigConsole.Settings.PruneSnapshots ? 0 : 1;
            pathToZfsTextField.Text = ConfigConsole.Settings.ZfsPath;
            pathToZpoolTextField.Text = ConfigConsole.Settings.ZpoolPath;

            Logger.Debug( "Finished etting global configuration fields to values in settings" );

            if ( manageEventHandlers )
            {
                EnableEventHandlers( );
            }
        }
    }
}
