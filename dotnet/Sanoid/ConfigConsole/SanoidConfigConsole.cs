// LICENSE:
// 
// This software is licensed for use under the Free Software Foundation's GPL v3.0 license, as retrieved
// from http://www.gnu.org/licenses/gpl-3.0.html on 2014-11-17.  A copy should also be available in this
// project's Git repository at https://github.com/jimsalterjrs/sanoid/blob/master/LICENSE.

#nullable enable

using System.Runtime.CompilerServices;
using System.Text.Json;

//  <auto-generated>
//      This code was generated by:
//        TerminalGuiDesigner v1.0.24.0
//      You can make changes to this file and they will not be overwritten when saving.
//  </auto-generated>
// -----------------------------------------------------------------------------

namespace Sanoid.ConfigConsole
{
    using System;
    using Terminal.Gui;

    public partial class SanoidConfigConsole
    {
        private GlobalConfigurationWindow? _globalConfigurationWindow;
        private ZfsConfigurationWindow? _zfsConfigurationWindow;
        private TemplateConfigurationWindow? _templateConfigurationWindow;
        public SanoidConfigConsole( )
        {
            Initialized+= SanoidConfigConsoleOnInitialized;
            Ready += SanoidConfigConsoleOnReady;
            InitializeComponent( );
            globalConfigMenuItem.Action = ShowGlobalConfigurationWindow;
            templateConfigMenuItem.Action = ShowTemplateConfigurationWindow;
            zfsConfigMenuItem.Action = ShowZfsConfigurationWindow;
        }

        private void ShowGlobalConfigurationWindow( )
        {
            _globalConfigurationWindow ??= new( );
            Add( _globalConfigurationWindow );
            if ( ShowChild( _globalConfigurationWindow ) )
            {
                Logger.Debug("Showing global configuration window");
                globalConfigMenuItem.Action = HideGlobalConfigurationWindow;
            }
            else
            {
                Remove( _globalConfigurationWindow );
                Logger.Error( "Unable to show global configuration window" );
            }
        }

        private void HideGlobalConfigurationWindow( )
        {
            Remove( _globalConfigurationWindow );
            globalConfigMenuItem.Action = ShowGlobalConfigurationWindow;
        }

        private void ShowTemplateConfigurationWindow( )
        {
            _templateConfigurationWindow ??= new( );
            Add( _templateConfigurationWindow );
            if ( ShowChild( _templateConfigurationWindow ) )
            {
                Logger.Debug( "Showing template configuration window" );
                templateConfigMenuItem.Action = HideTemplateConfigurationWindow;
            }
            else
            {
                Logger.Error( "Unable to show template configuration window" );
            }
        }

        private void HideTemplateConfigurationWindow()
        {
            Remove( _templateConfigurationWindow );
            templateConfigMenuItem.Action = ShowTemplateConfigurationWindow;
        }

        private void ShowZfsConfigurationWindow( )
        {
            _zfsConfigurationWindow ??= new( );
            Add( _zfsConfigurationWindow );
            if ( ShowChild( _zfsConfigurationWindow ) )
            {
                Logger.Debug( "Showing ZFS configuration window" );
                zfsConfigMenuItem.Action = HideZfsConfigurationWindow;
            }
            else
            {
                Logger.Error( "Unable to show ZFS configuration window" );
            }
        }

        private void HideZfsConfigurationWindow( )
        {
            Remove( _zfsConfigurationWindow );
            zfsConfigMenuItem.Action = ShowZfsConfigurationWindow;
        }

        private void SanoidConfigConsoleOnInitialized( object? sender, EventArgs e )
        {
            AddKeyBinding( Key.CtrlMask | Key.q, Command.QuitToplevel );
            quitMenuItem.Action = Application.Top.RequestStop;
            IsMdiContainer = true;
            Logger.Fatal( Application.MdiTop.Text );
        }

        private bool _eventsEnabled;

        private static readonly Logger Logger = LogManager.GetCurrentClassLogger( );

        private void SanoidConfigConsoleOnReady( )
        {
            EnableEventHandlers( );
        }

        private void GetAllSubviewTabInfo<T>( T startingPoint ) where T : View
        {
            //Logger.Warn( startingPoint.ToString( ) );
            //Logger.Warn( JsonSerializer.Serialize( new { TabStop = startingPoint.TabStop, TabIndex = startingPoint.TabIndex, TabIndexes = startingPoint.TabIndexes.Select( t => new { Type = t.GetType( ).Name, Index = t.TabIndex } ).ToArray( ) } ) );
            if ( startingPoint.Subviews.Count > 0 )
            {
                foreach ( var subview in startingPoint.Subviews )
                {
                    GetAllSubviewTabInfo( subview );
                }
            }
        }

        private void DisableEventHandlers( )
        {
            if ( !_eventsEnabled )
            {
                return;
            }

            _eventsEnabled = false;
        }

        private void EnableEventHandlers( )
        {
            if ( _eventsEnabled )
            {
                return;
            }

            _eventsEnabled = true;
        }
    }
}
